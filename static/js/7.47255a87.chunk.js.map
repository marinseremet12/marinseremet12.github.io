{"version":3,"sources":["assets/images/welcomeModal-dark.jpg","assets/images/welcomeModal-dark@2x.jpg","assets/images/welcomeModal-dark@3x.jpg","assets/images/welcomeModal-light.jpg","assets/images/welcomeModal-light@2x.jpg","assets/images/welcomeModal-light@3x.jpg","nft/components/explore/CollectionTable.tsx","nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/TrendingCollections.tsx","nft/components/explore/WelcomeModal.tsx","nft/pages/explore/index.tsx"],"names":["ColumnHeaders","CarouselContainer","styled","div","CarouselCardContainer","theme","breakpoint","md","CarouselItemCard","a","CarouselItemIcon","textPrimary","sm","opacity","hover","MAX_CARD_WIDTH","Carousel","children","activeIndex","toggleNextSlide","idx","useCallback","x","l","length","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","useSprings","springs","set","prev","useRef","runSprings","y","vy","Math","floor","position","prevPosition","current","rank","calculateRank","immediate","config","tension","friction","direction","useEffect","toggleSlide","next","interval","setInterval","clearInterval","onClick","width","height","map","style","LoadingCarousel","CarouselCardBorder","transition","duration","fast","timing","inOut","backgroundOutline","deepShadow","CardHeaderContainer","src","LoadingCardHeaderContainer","loadingAnimation","backgroundInteractive","CardHeaderColumn","IconContainer","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","img","accentTextLightPrimary","LoadingCollectionImage","LoadingTableElement","TableElement","FirstColumnTextWrapper","CardBottomContainer","MarketplaceIcon","backgroundSurface","xs","MarketplaceRow","marketplace","floorInEth","listings","toLowerCase","alt","BodySmall","color","Number","formatNumberOrString","NumberType","NFTTokenFloorPriceTrailingZeros","MARKETS_TO_CHECK","Markets","Opensea","X2Y2","LooksRare","MARKETS_ENUM_TO_NAME","CarouselCard","collection","gqlCollection","useCollectionQuery","address","SubHeaderSmall","formatWeiToDecimal","toString","marketplaceCount","reduce","acc","cur","count","market","find","floorPrice","LoadingTable","Array","index","CollectionName","ThemedText","MediumHeader","CarouselCardHeader","bannerImageUrl","imageUrl","fontWeight","name","isVerified","LoadingCarouselCard","BannerContainer","AbsoluteFill","BannerBackground","props","backgroundImage","darkMode","PlainBackground","opacify","userThemeColor","BannerMainArea","HeaderContainer","lg","EXCLUDED_COLLECTIONS","Banner","navigate","useNavigate","data","useQuery","fetchTrendingCollections","volumeType","timePeriod","TimePeriod","OneDay","size","refetchOnReconnect","refetchOnWindowFocus","refetchOnMount","collections","useMemo","filter","includes","slice","collectionAddresses","useLoadCollectionQuery","useState","activeCollectionIdx","setActiveCollectionIdx","onToggleNextSlide","activeCollection","fallback","TruncatedText","TruncatedSubHeader","SubHeader","TruncatedSubHeaderSmall","RoundedImage","backgroundModule","ChangeCellContainer","change","accentSuccess","accentFailure","EthContainer","CollectionTitleCell","value","isMobile","useIsMobile","logo","className","DiscreteNumberCell","volumeFormatter","getDenominatedValue","denomination","inWei","usdPrice","Denomination","ETH","parseFloat","formatEther","EthCell","denominatedValue","formattedValue","ethNumberStandardFormatter","TextComponent","BodyPrimary","TextCell","VolumeCell","ChangeCell","Caption","abs","round","table","thead","th","RankCellContainer","StyledRow","tr","stateOverlayHover","stateOverlayPressed","StyledLoadingRow","StyledHeader","disabled","click","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","useTheme","chainId","useWeb3React","useWindowSize","useTable","initialState","sortBy","desc","id","Volume","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","styles","headerGroup","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","disableSortBy","Box","as","isSorted","isSortedDesc","transform","render","row","events","BrowserEvent","EventName","NFT_TRENDING_ROW_SELECTED","properties","collection_address","original","chain_id","element","ElementName","NFT_TRENDING_ROW","getRowProps","cells","cell","cellIndex","getCellProps","maxWidth","BodySecondary","fontSize","lineHeight","_","compareFloats","b","CollectionTable","floorSort","rowA","rowB","aFloor","BigNumber","from","bFloor","gte","floorChangeSort","volumeSort","volume","volumeChangeSort","Header","accessor","Cell","Floor","sortType","AllTime","FloorChange","sortDescFirst","VolumeChange","Items","totalSupply","Owners","owners","timeOptions","label","SevenDays","ThirtyDays","ExploreContainer","FiltersRow","Filter","Selector","active","OpacityHoverState","StyledSelectorText","textSecondary","TrendingCollections","setTimePeriod","isEthToggled","setEthToggled","refetchInterval","isSuccess","fetchPrice","trendingCollections","d","volumeChange","type","floorChange","ownersChange","sales","USD","timeOption","Container","CloseButton","X","Background","Content","Link","ExternalLink","accentActive","Title","LargeHeader","xl","Paragraph","BACKGROUND_IMAGE","dark","require","default","srcSet","light","WelcomeModal","onDismissed","isOpen","setIsOpen","dismiss","setTimeout","Modal","onSwipe","isBottomSheet","draggable","href","title","NftExplore","setBagExpanded","useBag","state","useHideNFTWelcomeModal","isModalHidden","hideModal","bagExpanded","manualClose","page","PageName","NFT_EXPLORE_PAGE","shouldLogImpression"],"mappings":"wJAAA,OAAe,cAA0B,+C,kCCAzC,OAAe,cAA0B,kD,kCCAzC,OAAe,cAA0B,kD,kCCAzC,OAAe,cAA0B,gD,kCCAzC,OAAe,cAA0B,mD,kCCAzC,OAAe,cAA0B,mD,+CCS7BA,E,kJCHNC,EAAoBC,UAAOC,IAAV,uCAAGD,CAAH,uDAMjBE,EAAwBF,UAAOC,IAAV,uCAAGD,CAAH,yIAOY,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWC,GAAnC,SAKjCC,EAAmBN,kBAAOO,IAAEN,KAAZ,uCAAGD,CAAH,sMASY,qBAAGG,MAAkBC,WAAWC,MAK5DG,EAAmBR,UAAOC,IAAV,uCAAGD,CAAH,8LAEX,qBAAGG,MAAkBM,eAOO,gBAAGN,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAKxB,qBAAGP,MAAkBQ,QAAQC,SAUtCC,EAAiB,IAEVC,EAAW,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,gBAC1CC,EAAMC,uBAAY,SAACC,GAAD,IAAYC,EAAZ,uDAAgBN,EAASO,OAAzB,OAAoCC,YAAmBH,EAAGC,KAAI,CAACN,IACjFS,EAASL,uBACb,SAACM,EAAWC,EAAkBC,GAA9B,OAAsDC,YAAwBH,EAAGC,EAAUC,EAAaT,KACxG,CAACA,IAEH,EAAuBW,qBAAWd,EAASO,QAAQ,SAACG,GAAD,MAAQ,CACzDL,GAAIK,EAAIV,EAASO,OAAS,EAAIG,GAAK,GAAKZ,MAD1C,mBAAOiB,EAAP,KAAgBC,EAAhB,KAGMC,EAAOC,iBAAO,CAAC,EAAG,IAElBC,EAAaf,uBACjB,SAACgB,EAAWC,GACV,IAAMV,EAAWR,EAAImB,KAAKC,MAAMH,EAAItB,GAAkBE,EAASO,QACzDK,EAAcS,EAAK,EAAIrB,EAASO,OAAS,EAAI,EACnDS,GAAI,SAACN,GACH,IAAMc,EAAWf,EAAOC,EAAGC,EAAUC,GAC/Ba,EAAehB,EAAOC,EAAGO,EAAKS,QAAQ,GAAIT,EAAKS,QAAQ,IACvDC,EAAOC,YAAcjB,EAAUC,EAAaY,EAAUxB,EAASO,OAAQa,GAC7E,MAAO,CACLf,GAAKe,GAAKtB,EAAiBE,EAASO,QAAWT,EAAiB6B,EAChEE,UAAWR,EAAK,EAAII,EAAeD,EAAWC,EAAeD,EAC7DM,OAAQ,CAAEC,QAAS,IAAKC,SAAU,QAGtCf,EAAKS,QAAU,CAACf,EAAUC,KAE5B,CAACT,EAAKM,EAAQO,EAAKhB,EAASO,SAGxB0B,EAAYf,iBAAO,GAEzBgB,qBAAU,WACRf,EAAWlB,EAAcH,EAAgBmC,EAAUP,WAClD,CAACzB,EAAakB,IAEjB,IAAMgB,EAAc/B,uBAClB,SAACgC,GACCH,EAAUP,QAAUU,EACpBlC,EAAgBkC,KAElB,CAAClC,IAYH,OATAgC,qBAAU,WACR,IAAMG,EAAWC,YAAW,sBAAC,sBAAA9C,EAAA,sDAC3B2C,EAAY,GADe,2CAE1B,KACH,OAAO,WACLI,cAAcF,MAEf,CAACF,EAAalC,IAGf,eAACjB,EAAD,WACE,cAACS,EAAD,CAAkB+C,QAAS,kBAAML,GAAa,IAA9C,SACE,cAAC,IAAD,CAAiBM,MAAM,OAAOC,OAAO,WAEvC,cAACvD,EAAD,UACG4B,EAAQ4B,KAAI,WAAQjC,GAAR,IAAGL,EAAH,EAAGA,EAAH,OACX,cAACd,EAAD,CAA0BqD,MAAO,CAAEvC,KAAnC,SACGL,EAASU,IADWA,QAK3B,cAACjB,EAAD,CAAkB+C,QAAS,kBAAML,EAAY,IAA7C,SACE,cAAC,IAAD,CAAkBM,MAAM,OAAOC,OAAO,eAMjCG,EAAkB,SAAC,GAAD,IAAG7C,EAAH,EAAGA,SAAH,OAC7B,cAAC,EAAD,CAAUC,YAAa,EAAGC,gBAAiB,aAA3C,SACG,CAACF,M,oDChIA8C,EAAqB7D,UAAOC,IAAV,wCAAGD,CAAH,8bAOC,qBAAGG,MAAkB2D,WAAWC,SAASC,QAClC,qBAAG7D,MAAkB2D,WAAWG,OAAOC,SAG/C,qBAAG/D,MAAkBgE,qBAa3B,qBAAGhE,MAAkBiE,cAEZ,qBAAGjE,MAAkB2D,WAAWC,SAASC,QAClC,qBAAG7D,MAAkB2D,WAAWG,OAAOC,SAQnEG,EAAsBrE,UAAOC,IAAV,wCAAGD,CAAH,8FAEH,gBAAGsE,EAAH,EAAGA,IAAH,oBAAoBA,EAApB,QAKhBC,EAA6BvE,UAAOC,IAAV,wCAAGD,CAAH,+LAEjBwE,KAIT,qBAAGrE,MAAkBsE,yBACrB,qBAAGtE,MAAkBgE,qBACrB,qBAAGhE,MAAkBsE,yBAMrBC,EAAmB1E,UAAOC,IAAV,wCAAGD,CAAH,0JAYhB2E,EAAgB3E,UAAOC,IAAV,wCAAGD,CAAH,gEAKb4E,EAA0B5E,UAAOC,IAAV,wCAAGD,CAAH,oJAUvB6E,EAAiC7E,kBAAO8E,KAAV,wCAAG9E,CAAH,gBAI9B+E,EAAgB/E,UAAOC,IAAV,wCAAGD,CAAH,gNAebgF,EAAkBhF,UAAOiF,IAAV,wCAAGjF,CAAH,qFAGL,qBAAGG,MAAkB+E,0BACf,qBAAG/E,MAAkB+E,0BAIrCC,EAAyBnF,UAAOC,IAAV,wCAAGD,CAAH,wNAIbwE,KAIT,qBAAGrE,MAAkBsE,yBACrB,qBAAGtE,MAAkBgE,qBACrB,qBAAGhE,MAAkBsE,yBAMrBW,EAAsBpF,kBAAO8E,KAAV,yCAAG9E,CAAH,iBAInBqF,EAAerF,UAAOC,IAAV,yCAAGD,CAAH,8CAMZsF,EAAyBtF,UAAOC,IAAV,yCAAGD,CAAH,MAEtBuF,EAAsBvF,UAAOC,IAAV,yCAAGD,CAAH,8FAQnBwF,EAAkBxF,UAAOiF,IAAV,yCAAGjF,CAAH,6BAKfE,EAAwBF,UAAOC,IAAV,yCAAGD,CAAH,sYAGL,qBAAGG,MAAkBsF,qBACrB,qBAAGtF,MAAkBgE,oBAKvCkB,EAAiCD,EAIjCC,EAA+BD,GAIZ,qBAAGjF,MAAkBC,WAAWsF,MAAyB,qBAAGvF,MACzEC,WAAWM,KACf4E,EAGAD,EAGAX,GAYAiB,EAAiB,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,SACjD,OACE,qCACE,eAACT,EAAD,WACE,cAACG,EAAD,CACElB,IAAG,iCAA4BsB,EAAYG,cAAxC,aACHC,IAAG,UAAKJ,EAAL,WAEL,cAACN,EAAD,UACE,cAAC,IAAWW,UAAZ,CAAsBC,MAAM,gBAA5B,SAA6CN,SAGjD,cAACP,EAAD,UACE,cAAC,IAAWY,UAAZ,CAAsBC,MAAM,gBAA5B,SACGC,OAAON,GAAc,EAArB,UACMO,YAAqBP,EAAYQ,IAAWC,iCADlD,QAEG,QAGR,cAACjB,EAAD,UACE,cAAC,IAAWY,UAAZ,CAAsBC,MAAM,gBAA5B,SAA6CC,OAAOL,GAAY,EAAIA,EAAW,eAWjFS,EAAmB,CAACC,IAAQC,QAASD,IAAQE,KAAMF,IAAQG,WAC3DC,IAAoB,mBACvBJ,IAAQC,QAAU,WADK,cAEvBD,IAAQE,KAAO,QAFQ,cAGvBF,IAAQG,UAAY,aAHG,GAMbE,GAAe,SAAC,GAAgD,IAAD,EAA7CC,EAA6C,EAA7CA,WAAYvD,EAAiC,EAAjCA,QACnCwD,EAAgBC,YAAmBF,EAAWG,SAEpD,OACE,cAACpD,EAAD,UACE,eAAC,EAAD,CAAuBN,QAASA,EAAhC,UACE,cAAC,GAAD,CAAoBuD,WAAYA,IAChC,cAACvB,EAAD,UACE,qCACE,eAACF,EAAD,WACE,cAACG,EAAD,CAAiBlB,IAAI,6CAA6C0B,IAAI,iBACtE,cAACV,EAAD,UACE,cAAC,IAAW4B,eAAZ,CAA2BhB,MAAM,iBAAjC,0BAGJ,cAACb,EAAD,UACE,eAAC,IAAW6B,eAAZ,CAA2BhB,MAAM,iBAAjC,UACGiB,YAAmBL,EAAWxE,MAAM8E,YADvC,kBAIF,cAAC/B,EAAD,UACE,eAAC,IAAW6B,eAAZ,CAA2BhB,MAAM,iBAAjC,oBACGa,EAAcM,wBADjB,aACG,EAAgCC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAIC,QAAO,GADzE,iBAIDlB,EAAiB7C,KAAI,SAACgE,GAAY,IAAD,EAC1B9B,EAAW,UAAGmB,EAAcM,wBAAjB,aAAG,EAAgCM,MAClD,SAAC/B,GAAD,OAAiBA,EAAYA,cAAgB8B,KAE/C,OAAK9B,EAIH,cAAC,EAAD,CAEEA,YAAagB,GAAqBc,GAClC5B,SAAUF,EAAY6B,MACtB5B,WAAYD,EAAYgC,YAJ1B,2BAC2Bd,EAAWG,QADtC,YACiDrB,EAAYA,cAJtD,mBAoBjBiC,GAAe,WACnB,OACE,mCACG,YAAIC,MALoB,KAKWpE,KAAI,SAACqE,GAAD,OACtC,cAAC3C,EAAD,GAA0B2C,SAM5BC,GAAiBhI,kBAAOiI,IAAWC,cAArB,yCAAGlI,CAAH,iEAMdmI,GAAqB,SAAC,GAAwD,IAAtDrB,EAAqD,EAArDA,WAC5B,OACE,eAACzC,EAAD,CAAqBC,IAAKwC,EAAWsB,eAArC,UACE,eAAC1D,EAAD,WACE,cAACM,EAAD,CAAiBV,IAAKwC,EAAWuB,WACjC,eAACzD,EAAD,WACE,cAACoD,GAAD,CAAgB9B,MAAM,yBAAyBoC,WAAW,MAA1D,SACGxB,EAAWyB,OAEbzB,EAAW0B,YACV,cAAC7D,EAAD,UACE,cAAC,IAAD,CAAcnB,MAAM,OAAOC,OAAO,iBAK1C,cAACsB,EAAD,QAKO0D,GAAsB,SAAC,GAAyD,IAAvD3B,EAAsD,EAAtDA,WACpC,OACE,cAACjD,EAAD,UACE,eAAC,EAAD,WACGiD,EACC,cAAC,GAAD,CAAoBA,WAAYA,IAEhC,eAACvC,EAAD,WACE,eAACG,EAAD,WACE,cAACS,EAAD,IACA,cAACN,EAAD,OAEF,cAACE,EAAD,OAGJ,cAACQ,EAAD,UACE,cAAC,GAAD,YCtUJmD,GAAkB1I,UAAOC,IAAV,wCAAGD,CAAH,kJAOkB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAKjCiI,GAAe3I,UAAOC,IAAV,wCAAGD,CAAH,0DAUZ4I,GAAmB5I,kBAAO2I,IAAV,wCAAG3I,CAAH,kGAGA,SAAC6I,GAAD,oBAAkBA,EAAMC,gBAAxB,QAGT,qBAAG3I,MAAmB4I,SAAW,GAAM,MAG9CC,GAAkBhJ,kBAAO2I,IAAV,wCAAG3I,CAAH,qBACL,gBAAGG,EAAH,EAAGA,MAAH,gCAAkC8I,YAAQ,GAAI9I,EAAM+I,gBAApD,qBAGVC,GAAiBnJ,UAAOC,IAAV,wCAAGD,CAAH,mPAUmB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SASjC0I,GAAkBpJ,UAAOC,IAAV,wCAAGD,CAAH,8fAUV,qBAAGG,MAAkBM,eAEO,gBAAGN,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWiJ,GAAnC,SAKA,gBAAGlJ,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWC,GAAnC,SAKA,gBAAGF,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAuBjC4I,GAAuB,CAAC,8CA8EfC,GA3EA,WACb,IAAMC,EAAWC,cAETC,EAASC,mBACf,CAAC,wBACD,WACE,OAAOC,YAAyB,CAC9BC,WAAY,MACZC,WAAYC,IAAWC,OACvBC,KAXyB,EAWQX,GAAqBhI,WAG1D,CACE4I,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAgB,IAZZV,KAgBFW,EAAcC,mBAClB,yBAAMZ,QAAN,IAAMA,OAAN,EAAMA,EAAMa,QAAO,SAACzD,GAAD,OAAiBwC,GAAqBkB,SAAS1D,EAAWG,YAAUwD,MAAM,EAAG,KAChG,CAACf,IAIGgB,EAAsBJ,mBAAQ,yBAAMD,QAAN,IAAMA,OAAN,EAAMA,EAAa3G,KAAI,qBAAGuD,aAAwB,CAACoD,IACvFM,YAAuBD,GAEvB,MAAsDE,mBAAS,GAA/D,mBAAOC,EAAP,KAA4BC,EAA5B,KACMC,EAAoB5J,uBACxB,SAAC6B,GACMqH,GACLS,GAAuB,SAAC5J,GAAD,OAASK,YAAmBL,EAAM8B,EAAWqH,EAAY/I,aAElF,CAAC+I,IAGGW,EAAgB,OAAGX,QAAH,IAAGA,OAAH,EAAGA,EAAcQ,GAEvC,OACE,eAACnC,GAAD,WACGsC,EACCA,EAAiB5C,eACf,cAACQ,GAAD,CAAkBE,gBAAiBkC,EAAiB5C,iBAEpD,cAACY,GAAD,IAEA,KACJ,eAACG,GAAD,WACE,eAACC,GAAD,6BACiB,uBADjB,oBAICiB,EACC,cAAC,EAAD,CAAUrJ,YAAa6J,EAAqB5J,gBAAiB8J,EAA7D,SACGV,EAAY3G,KAAI,SAACoD,GAAD,OACf,cAAC,WAAD,CAAUmE,SAAU,cAAC,GAAD,CAAqBnE,WAAYA,IAArD,SACE,cAAC,GAAD,CAEEA,WAAYA,EACZvD,QAAS,kBAAMiG,EAAS,oBAAD,OAAqB1C,EAAWG,YAFlDH,EAAWG,UAFsDH,EAAWG,cAUzF,cAAC,EAAD,UACE,cAAC,GAAD,a,0EC1KNiE,I,cAAgBlL,UAAOC,IAAV,wCAAGD,CAAH,iEAMb4E,GAA0B5E,kBAAOkL,IAAV,wCAAGlL,CAAH,gEAMvBgI,GAAiBhI,kBAAOkL,IAAV,wCAAGlL,CAAH,sBAIdmL,GAAqBnL,kBAAOiI,KAAWmD,WAArB,wCAAGpL,CAAH,gEAKlBqL,GAA0BrL,kBAAOiI,KAAWf,gBAArB,wCAAGlH,CAAH,0EAClB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMM,gBAM7B6K,GAAetL,UAAOC,IAAV,wCAAGD,CAAH,8HAIF,gBAAGsE,EAAH,EAAGA,IAAKnE,EAAR,EAAQA,MAAR,OAAqBmE,EAAG,cAAUA,EAAV,KAAmBnE,EAAMoL,oBAM3DC,GAAsBxL,UAAOC,IAAV,wCAAGD,CAAH,4EAEd,gBAAGG,EAAH,EAAGA,MAAH,SAAUsL,QAAwB,EAAItL,EAAMuL,cAAgBvL,EAAMwL,iBAMvEC,GAAe5L,UAAOC,IAAV,wCAAGD,CAAH,uCAgBL6L,GAAsB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAC9BC,EAAWC,eACjB,OACE,eAAC,GAAD,WACE,cAACV,GAAD,CAAchH,IAAKwH,EAAMG,OACzB,cAAC,GAAD,UACGF,EACC,cAACV,GAAD,UAA0BS,EAAMvD,OAEhC,cAAC4C,GAAD,UAAqBW,EAAMvD,SAG9BuD,EAAMtD,YACL,sBAAM0D,UClFa,6DDkFnB,SACE,cAAC,IAAD,UAOGC,GAAqB,SAAC,GAAD,IAAGL,EAAH,EAAGA,MAAH,OAChC,+BAAOA,EAAMA,MAAQM,YAAgBN,EAAMA,OAAS,OAGhDO,GAAsB,SAACC,EAA4BC,EAAgBT,EAAgBU,GACvF,OAAIF,IAAiBG,IAAaC,IAAYZ,EAC1CU,GAAYV,EAAcU,GAAYD,EAAQI,WAAWC,uBAAYd,IAAUA,QAAnF,GAKWe,GAAU,SAAC,GAQjB,IAPLf,EAOI,EAPJA,MACAQ,EAMI,EANJA,aACAE,EAKI,EALJA,SAMMM,EAAmBT,GAAoBC,GAAc,EAAMR,EAAOU,GAClEO,EAAiBD,EACnBR,IAAiBG,IAAaC,IAC5BvF,aAAmB2F,EAAiB1F,YAAY,GAAQ,OACxD4F,aAA2BF,GAAkB,GAAM,GAAO,GAC5D,IAGEG,EADWjB,eACgB/D,KAAWhC,UAAYgC,KAAWiF,YAEnE,OACE,cAACtB,GAAD,UACE,cAACqB,EAAD,UAAgBnB,EAAQiB,EAAiB,SAKlCI,GAAW,SAAC,GAAD,IAAGrB,EAAH,EAAGA,MAAH,OAAkC,cAAC,KAAWoB,YAAZ,UAAyBpB,KAEtEsB,GAAa,SAAC,GAQpB,IAPLtB,EAOI,EAPJA,MACAQ,EAMI,EANJA,aACAE,EAKI,EALJA,SAMMM,EAAmBT,GAAoBC,GAAc,EAAOR,EAAOU,GAEnEO,EAAiBD,EACnBR,IAAiBG,IAAaC,IAC5BM,aAA2BF,EAAiB1F,YAAY,GAAO,GAAO,GAAQ,OAC9E4F,aAA2BF,GAAkB,GAAM,GAAO,GAC5D,IAEJ,OACE,cAAClB,GAAD,UACE,cAAC,KAAWsB,YAAZ,UAAyBpB,EAAQiB,EAAiB,SAK3CM,GAAa,SAAC,GAAqE,IAAnE5B,EAAkE,EAAlEA,OAAQ1K,EAA0D,EAA1DA,SAE7BkM,EADWjB,eACgB/D,KAAWqF,QAAUrF,KAAWiF,YACjE,OACE,eAAC1B,GAAD,CAAqBC,OAAM,OAAEA,QAAF,IAAEA,IAAU,EAAvC,WACIA,GAAUA,EAAS,EACnB,cAAC,IAAD,CAAmBjI,MAAM,OAAOC,OAAO,SAEvC,cAAC,IAAD,CAAqBD,MAAM,OAAOC,OAAO,SAE3C,cAACwJ,EAAD,CAAe/G,MAAM,eAArB,SAAqCnF,GAAQ,UAAO0K,EAASpJ,KAAKkL,IAAIlL,KAAKmL,MAAM/B,IAAW,EAA/C,W,iDEhKxCgC,I,QAAQ,qDACRC,GAAQ,yCACRC,GAAK,sE,2HCcVC,GAAoB5N,UAAOC,IAAV,uCAAGD,CAAH,0HAKgB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAKjCmN,GAAY7N,UAAO8N,GAAV,uCAAG9N,CAAH,oEAGG,qBAAGG,MAAkB4N,qBAGrB,qBAAG5N,MAAkB6N,uBAIjCC,GAAmBjO,UAAO8N,GAAV,uCAAG9N,CAAH,kBAIhBkO,GAAelO,UAAO2N,GAAV,uCAAG3N,CAAH,gCACd,qBAAGmO,UAAe,sBAGhB,gBAAGhO,EAAH,EAAGA,MAAH,SAAUgO,UAAe,mBAAyBhO,EAAMQ,QAAQC,MAAvC,QAIzB,gBAAGT,EAAH,EAAGA,MAAH,SAAUgO,UAAe,mBAAyBhO,EAAMQ,QAAQyN,MAAvC,QAIzBC,GAAsBrO,UAAOC,IAAV,uCAAGD,CAAH,qEAOnBsO,GAA6BtO,UAAOC,IAAV,uCAAGD,CAAH,+DAO1BuO,GAAoBvO,kBAAO8E,KAAV,uCAAG9E,CAAH,gDAMjBwO,GAAmBxO,kBAAO8E,KAAV,uCAAG9E,CAAH,8CAef,SAASyO,GAAT,GAOY,IANjBC,EAMgB,EANhBA,QACAhF,EAKgB,EALhBA,KACAiF,EAIgB,EAJhBA,mBACAC,EAGgB,EAHhBA,oBACAC,EAEgB,EAFhBA,mBACGhG,EACa,mBACV1I,EAAQ2O,qBACNC,EAAYC,0BAAZD,QACAvL,EAAUyL,eAAVzL,MACFuI,EAAWC,eAEjB,EACEkD,oBAAS,cAELR,UACAhF,OACAyF,aAAc,CACZC,OAAQ,CACN,CACEC,MAAM,EACNC,GAAIxP,EAAcyP,WAIrB1G,GAEL2G,cAfIC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,kBAAmBC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,KAAMC,EAA9D,EAA8DA,WAAYC,EAA1E,EAA0EA,iBAAkBC,EAA5F,EAA4FA,eAkBtFvG,EAAWC,cAgBjB,OAdAxG,qBAAU,WACHO,IAEDA,GAASrD,EAAMC,WAAWM,GAC5BoP,EAAiBnB,GACRnL,GAASrD,EAAMC,WAAWC,GACnCyP,EAAiBlB,GACRpL,GAASrD,EAAMC,WAAWiJ,GACnCyG,EAAiBjB,GAEjBiB,EAAiB,OAElB,CAACtM,EAAOsM,EAAkBpB,EAASC,EAAoBC,EAAqBC,EAAoB1O,EAAMC,aAErF,IAAhBsJ,EAAKpI,OACA,cAAC,GAAD,cAAcqO,aAAcA,EAAcI,eAAgBA,GAAoBN,MAIrF,cAAC,KAAD,UACE,oDAAWA,KAAX,IAA4BvD,UAAW8D,GAAvC,UACE,uBAAO9D,UAAW8D,GAAlB,SACGL,EAAajM,KAAI,SAACuM,GAAD,OAChB,0DAAQA,EAAYC,uBAApB,IAA2CC,IAAKF,EAAYX,KACzDW,EAAYG,QAAQ1M,KAAI,SAAC2M,EAAQtI,GAChC,OACE,wBAACmG,GAAD,2BACEhC,UAAW8D,IACPK,EAAOC,eAAeD,EAAOE,yBAFnC,IAGE5M,MAAO,CACL6M,UAAqB,IAAVzI,EAAc,OAAS,QAClC0I,YAAuB,IAAV1I,EAAegE,EAAW,OAAS,OAAU,GAE5DoC,SAAUkC,EAAOK,cACjBP,IAAKpI,IAEL,cAAC4I,GAAA,EAAD,CAAKC,GAAG,OAAO1K,MAAM,eAAe3D,SAAS,WAA7C,SACG8N,EAAOQ,SACNR,EAAOS,aACL,cAAC,IAAD,CAAgBnN,MAAO,CAAEoN,UAAW,gBAAiBxO,SAAU,cAE/D,cAAC,IAAD,CAAgBoB,MAAO,CAAEoN,UAAW,iBAAkBxO,SAAU,cAGlE,KAGJ,cAACoO,GAAA,EAAD,CAAKC,GAAG,OAAOH,YAAaJ,EAAOQ,SAAW,KAAO,IAArD,SACGR,EAAOW,OAAO,sBAQ7B,mDAAWtB,KAAX,aACGE,EAAKlM,KAAI,SAACuN,EAAKxP,GAGd,OAFAoO,EAAWoB,GAGT,cAAC,aAAD,CACEC,OAAQ,CAACC,eAAa5N,SACtBgF,KAAM6I,YAAUC,0BAChBC,WAAY,CAAEC,mBAAoBN,EAAIO,SAAS1K,WAAWG,QAASwK,SAAU1C,GAC7E2C,QAASC,cAAYC,iBAJvB,SAOE,wBAAC/D,GAAD,6BACMoD,EAAIY,eADV,IAEE1B,IAAKc,EAAI3B,GACT/L,QAAS,kBAAMiG,EAAS,oBAAD,OAAqByH,EAAIO,SAAS1K,WAAWG,WACpE,cAAY,4BAEXgK,EAAIa,MAAMpO,KAAI,SAACqO,EAAMC,GACpB,OACE,wDACE9F,UDlMR,2FCmMY6F,EAAKE,gBAFX,IAGE9B,IAAK6B,EACLrO,MAAO,CACLuO,SAAwB,IAAdF,EAAmBjG,EA5L7B,QACC,QAHR,WAiMoB,IAAdiG,EACC,eAACpE,GAAD,YACI7B,GACA,cAAC,KAAWoG,cAAZ,CAA0BC,SAAS,OAAOC,WAAW,OAArD,SACG5Q,EAAI,IAGRsQ,EAAKf,OAAO,WAGfe,EAAKf,OAAO,cA5BjBvP,eAgDrB,SAASoG,GAAT,GAAsF,IAA9D8H,EAA6D,EAA7DA,aAAcI,EAA+C,EAA/CA,eAAmBlH,EAA4B,mBACnF,OACE,cAAC,KAAD,UACE,oDAAWA,GAAX,IAAkBqD,UAAW8D,GAA7B,UACE,uBAAO9D,UAAW8D,GAAlB,SACGL,EAAajM,KAAI,SAACuM,GAAD,OAChB,0DAAQA,EAAYC,uBAApB,IAA2CC,IAAKF,EAAYX,KACzDW,EAAYG,QAAQ1M,KAAI,SAAC2M,EAAQtI,GAChC,OACE,wBAACmG,GAAD,2BACEhC,UAAW8D,IACPK,EAAOC,eAAeD,EAAOE,yBAFnC,IAGE5M,MAAO,CACL6M,UAAqB,IAAVzI,EAAc,OAAS,QAClC0I,YAAuB,IAAV1I,EAAc,OAAS,GAEtCoG,SAAoB,IAAVpG,EACVoI,IAAKpI,IAEL,cAAC4I,GAAA,EAAD,CAAKC,GAAG,OAAO1K,MAAM,eAAe3D,SAAS,WAA7C,SACG8N,EAAOQ,SACNR,EAAOS,aACL,cAAC,IAAD,CAAgBnN,MAAO,CAAEoN,UAAW,gBAAiBxO,SAAU,cAE/D,cAAC,IAAD,CAAgBoB,MAAO,CAAEoN,UAAW,iBAAkBxO,SAAU,cAGlE,KAGJ,cAACoO,GAAA,EAAD,CAAKC,GAAG,OAAOH,YAAaJ,EAAOQ,SAAW,KAAO,IAArD,SACGR,EAAOW,OAAO,sBAQ7B,mDAAWnI,GAAX,aACG,YAAIf,MApM6B,KAoMepE,KAAI,SAAC4O,EAAGvK,GAAJ,OACnD,cAACkG,GAAD,UACG,YAAInG,MAAMiI,EAAezO,SAASoC,KAAI,SAAC4O,EAAGN,GACzC,OACE,oBAAI9F,UDlRC,0FCkRL,SACiB,IAAd8F,EACC,eAAC1D,GAAD,WACE,cAACE,GAAD,IACA,cAACD,GAAD,IACA,cAAC,IAAD,OAGF,cAACF,GAAD,UACE,cAAC,IAAD,OATgC2D,OAHrBjK,gB,SPlRvBjI,K,gBAAAA,E,6BAAAA,E,cAAAA,E,2BAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,M,KAUZ,IAEMyS,GAAgB,SAAChS,EAAWiS,GAChC,OAAOnQ,KAAKmL,MAAU,IAAJjN,IAAe8B,KAAKmL,MAAU,IAAJgF,GAAc,GAAK,GAyJlDC,GAtJS,SAAC,GAAqF,IAAnF/I,EAAkF,EAAlFA,KAAMI,EAA4E,EAA5EA,WACzB4I,EAAYpI,mBAAQ,WACxB,OAAO,SAACqI,EAAkCC,GAAsC,IAAD,IACvEC,EAASC,KAAUC,KAAV,UAAeJ,EAAKnB,SAASlP,MAAMwJ,aAAnC,QAA4C,GACrDkH,EAASF,KAAUC,KAAV,UAAeH,EAAKpB,SAASlP,MAAMwJ,aAAnC,QAA4C,GAE3D,OAAO+G,EAAOI,IAAID,GAAU,GAAK,KAElC,IAEGE,EAAkB5I,mBAAQ,WAC9B,OAAO,SAACqI,EAAkCC,GACxC,OAAOL,GAAcI,EAAKnB,SAASlP,MAAMmJ,OAAQmH,EAAKpB,SAASlP,MAAMmJ,WAEtE,IAEG0H,EAAa7I,mBAAQ,WACzB,OAAO,SAACqI,EAAkCC,GACxC,OAAOL,GAAcI,EAAKnB,SAAS4B,OAAOtH,MAAO8G,EAAKpB,SAAS4B,OAAOtH,UAEvE,IAEGuH,EAAmB/I,mBAAQ,WAC/B,OAAO,SAACqI,EAAkCC,GACxC,OAAOL,GAAcI,EAAKnB,SAAS4B,OAAO3H,OAAQmH,EAAKpB,SAAS4B,OAAO3H,WAExE,IAEGiD,EAA2CpE,mBAC/C,iBAAM,CACJ,CACEgJ,OAAQ,kBACRC,SAAU,aACVC,KAAM3H,GACN6E,eAAe,GAEjB,CACEpB,GAAIxP,EAAc2T,MAClBH,OAAQxT,EAAc2T,MACtBF,SAAU,qBAAGjR,MAAkBwJ,OAC/B4H,SAAUhB,EACVc,KAAM,SAAiBzB,GACrB,OACE,qCACE,cAAC,GAAD,CACEjG,MAAOiG,EAAKd,IAAIO,SAASlP,MAAMwJ,MAC/BQ,aAAcyF,EAAKd,IAAIO,SAASlF,aAChCE,SAAUuF,EAAKd,IAAIO,SAAShF,WAE7B1C,IAAeC,IAAW4J,SACzB,cAAC,KAAD,UACE,cAAC,GAAD,CAAYlI,OAAQsG,EAAKd,IAAIO,SAASlP,MAAMmJ,gBAOxD,CACE6D,GAAIxP,EAAc8T,YAClBN,OAAQxT,EAAc8T,YACtBL,SAAU,qBAAGjR,MAAkBwJ,OAC/B+H,eAAe,EACfnD,cAAe5G,IAAeC,IAAW4J,QACzCD,SAAUR,EACVM,KAAM,SAAoBzB,GACxB,OAAOjI,IAAeC,IAAW4J,QAC/B,cAAC,GAAD,CAAU7H,MAAM,MAEhB,cAAC,GAAD,CAAYL,OAAQsG,EAAKd,IAAIO,SAASlP,MAAMmJ,WAIlD,CACE6D,GAAIxP,EAAcyP,OAClB+D,OAAQxT,EAAcyP,OACtBgE,SAAU,qBAAGH,OAAoBtH,OACjC+H,eAAe,EACfH,SAAUP,EACVK,KAAM,SAAoBzB,GACxB,OACE,cAAC,GAAD,CACEjG,MAAOiG,EAAKd,IAAIO,SAAS4B,OAAOtH,MAChCQ,aAAcyF,EAAKd,IAAIO,SAASlF,aAChCE,SAAUuF,EAAKd,IAAIO,SAAShF,aAKpC,CACE8C,GAAIxP,EAAcgU,aAClBR,OAAQxT,EAAcgU,aACtBP,SAAU,qBAAGH,OAAoBtH,OACjC+H,eAAe,EACfnD,cAAe5G,IAAeC,IAAW4J,QACzCD,SAAUL,EACVG,KAAM,SAAoBzB,GACxB,IAAQtG,EAAWsG,EAAKd,IAAIO,SAAS4B,OAA7B3H,OACR,OAAO3B,IAAeC,IAAW4J,QAC/B,cAAC,GAAD,CAAU7H,MAAM,MACdL,GA1GkB,KA2GpB,eAAC,GAAD,CAAYA,OAAQA,EAApB,qBA3GoB,MA2GpB,OAEA,cAAC,GAAD,CAAYA,OAAQA,MAI1B,CACE6D,GAAIxP,EAAciU,MAClBT,OAAQxT,EAAciU,MACtBR,SAAU,cACVM,eAAe,EACfL,KAAM,SAA4BzB,GAChC,OAAO,cAAC,GAAD,CAAoBjG,MAAO,CAAEA,MAAOiG,EAAKd,IAAIO,SAASwC,iBAGjE,CACEV,OAAQxT,EAAcmU,OACtBV,SAAU,qBAAGW,OAAoBpI,OACjC+H,eAAe,EACfL,KAAM,SAA4BzB,GAChC,OAAO,cAAC,GAAD,CAAoBjG,MAAOiG,EAAKd,IAAIO,SAAS0C,cAI1D,CAAChB,EAAiBR,EAAWW,EAAkBF,EAAYrJ,IAE7D,OACE,mCACE,cAAC2E,GAAD,CACEE,mBAAoB,CAClB7O,EAAciU,MACdjU,EAAc8T,YACd9T,EAAcyP,OACdzP,EAAcgU,aACdhU,EAAcmU,QAEhBrF,oBAAqB,CACnB9O,EAAciU,MACdjU,EAAc8T,YACd9T,EAAcgU,aACdhU,EAAcmU,QAEhBpF,mBAAoB,CAAC/O,EAAciU,MAAOjU,EAAcmU,QAClDvK,OAAMgF,eQ7JdyF,GAAsD,CAC1D,CAAEC,MAAO,KAAMtI,MAAO/B,IAAWC,QACjC,CAAEoK,MAAO,KAAMtI,MAAO/B,IAAWsK,WACjC,CAAED,MAAO,KAAMtI,MAAO/B,IAAWuK,YACjC,CAAEF,MAAO,MAAOtI,MAAO/B,IAAW4J,UAG9BY,GAAmBvU,UAAOC,IAAV,wCAAGD,CAAH,oFAQhBkO,GAAelO,UAAOC,IAAV,wCAAGD,CAAH,mIACP,qBAAGG,MAAkBM,eAKO,gBAAGN,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAMjC8T,GAAaxU,UAAOC,IAAV,wCAAGD,CAAH,+JAMuB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAMjC+T,GAASzU,UAAOC,IAAV,wCAAGD,CAAH,uEAEU,qBAAGG,MAAkBgE,qBAKrCuQ,GAAW1U,UAAOC,IAAV,wCAAGD,CAAH,2EAGE,gBAAG2U,EAAH,EAAGA,OAAQxU,EAAX,EAAWA,MAAX,OAAwBwU,EAASxU,EAAMsE,sBAAwB,SAG3EmQ,MAGEC,GAAqB7U,kBAAOiI,KAAWmD,WAArB,wCAAGpL,CAAH,gBACb,gBAAGG,EAAH,EAAGA,MAAH,SAAUwU,OAAuBxU,EAAMM,YAAcN,EAAM2U,iBA+FvDC,GA5Fa,WAC1B,MAAoCnK,mBAAqBb,IAAWC,QAApE,mBAAOF,EAAP,KAAmBkL,EAAnB,KACA,EAAsCpK,oBAAS,GAA/C,mBAAOqK,EAAP,KAAqBC,EAArB,KAEA,EAA4BvL,mBAC1B,CAAC,sBAAuBG,IACxB,WACE,OAAOF,YAAyB,CAAEC,WAAY,MAAOC,aAAYG,KAAM,QAEzE,CACEC,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAgB,EAChB+K,gBAAiB,MATbC,EAAR,EAAQA,UAAW1L,EAAnB,EAAmBA,KAaL8C,EAAa7C,mBAAS,CAAC,aAAc,KAAK,kBAAM0L,gBAAc,CAC1EnL,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAgB,EAChB+K,gBAAgB,MAJVzL,KAOF4L,EAAsBhL,mBAAQ,WAClC,OAAI8K,GAAa1L,EACRA,EAAKhG,KAAI,SAAC6R,GAAD,oBAAC,gBACZA,GADW,IAEdzO,WAAY,CACVyB,KAAMgN,EAAEhN,KACR0D,KAAMsJ,EAAElN,SACRpB,QAASsO,EAAEtO,QACXuB,WAAY+M,EAAE/M,YAEhB4K,OAAQ,CACNtH,MAAOyJ,EAAEnC,OACT3H,OAAQ8J,EAAEC,aACVC,KAAM,OAERnT,MAAO,CACLwJ,MAAOyJ,EAAEjT,MACTmJ,OAAQ8J,EAAEG,aAEZxB,OAAQ,CACNpI,MAAOyJ,EAAErB,OACTzI,OAAQ8J,EAAEI,cAEZC,MAAOL,EAAEK,MACT5B,YAAauB,EAAEvB,YACf1H,aAAc2I,EAAexI,IAAaC,IAAMD,IAAaoJ,IAC7DrJ,gBAEU,KACb,CAAC9C,EAAM0L,EAAWH,EAAczI,IAEnC,OACE,eAAC+H,GAAD,WACE,cAAC,GAAD,uCACA,eAACC,GAAD,WACE,cAACC,GAAD,UACGN,GAAYzQ,KAAI,SAACoS,GAChB,OACE,cAACpB,GAAD,CAEEC,OAAQmB,EAAWhK,QAAUhC,EAC7BvG,QAAS,kBAAMyR,EAAcc,EAAWhK,QAH1C,SAKE,cAAC+I,GAAD,CAAoBxC,WAAW,OAAOsC,OAAQmB,EAAWhK,QAAUhC,EAAnE,SACGgM,EAAW1B,SALT0B,EAAWhK,YAWxB,eAAC2I,GAAD,CAAQlR,QAAS,kBAAM2R,GAAeD,IAAtC,UACE,cAACP,GAAD,CAAUC,OAAQM,EAAlB,SACE,cAACJ,GAAD,CAAoBxC,WAAW,OAAOsC,OAAQM,EAA9C,mBAIF,cAACP,GAAD,CAAUC,QAASM,EAAnB,SACE,cAACJ,GAAD,CAAoBxC,WAAW,OAAOsC,QAASM,EAA/C,yBAMN,cAAC,GAAD,CAAiBvL,KAAM4L,EAAqBxL,WAAYA,Q,qBCrJxDiM,GAAY/V,UAAOC,IAAV,wCAAGD,CAAH,+GASTgW,GAAchW,kBAAOiW,MAAV,wCAAGjW,CAAH,2DAOXkW,GAAalW,UAAOiF,IAAV,wCAAGjF,CAAH,mEAQVmW,GAAUnW,UAAOC,IAAV,wCAAGD,CAAH,4DAOPoW,GAAOpW,kBAAOqW,MAAV,wCAAGrW,CAAH,2BACC,qBAAGG,MAAkBmW,gBACpB,qBAAGnW,MAAkBmW,gBAG3BC,GAAQvW,kBAAOiI,IAAWuO,aAArB,wCAAGxW,CAAH,0DACY,qBAAGG,MAAkBC,WAAWqW,MAKjDC,GAAY1W,kBAAOiI,IAAWkK,eAArB,wCAAGnS,CAAH,4FAGQ,qBAAGG,MAAkBC,WAAWqW,MAMjDE,GAAmB,CACvBC,KAAM,CACJtS,IAAKuS,EAAQ,MAAgDC,QAC7DC,OAAO,WAAD,OACFF,EAAQ,MAAmDC,QADzD,uBAEFD,EAAQ,MAAmDC,QAFzD,eAKRE,MAAO,CACL1S,IAAKuS,EAAQ,MAAiDC,QAC9DC,OAAO,WAAD,OACFF,EAAQ,MAAoDC,QAD1D,uBAEFD,EAAQ,MAAoDC,QAF1D,gBAOH,SAASG,GAAT,GAAqE,IAA7CC,EAA4C,EAA5CA,YAC7B,EAA4BtM,oBAAS,GAArC,mBAAOuM,EAAP,KAAeC,EAAf,KAEMC,EAAU,WACdD,GAAU,GACVE,YAAW,kBAAMJ,QAGb/W,EAAQ2O,qBAEd,OACE,cAACyI,GAAA,EAAD,CAAOJ,OAAQA,EAAQK,QAASH,EAASnF,SAAU,IAAKuF,eAAe,EAAvE,SACE,eAAC1B,GAAD,WACE,cAACG,GAAD,6BACO/V,EAAM4I,SAAW4N,GAAiBC,KAAOD,GAAiBK,OADjE,IAEEhR,IAAI,2BACJ0R,WAAW,KAEb,eAACvB,GAAD,WACE,cAACI,GAAD,0CACA,eAACG,GAAD,gIAEU,uBACR,uBAHF,4CAI4C,IAC1C,eAACN,GAAD,CAAMuB,KAAK,iCAAiCC,MAAM,kCAAlD,qBACW,OACH,IAPV,iHASW,IACT,cAACxB,GAAD,CACEuB,KAAK,+DACLC,MAAM,sCAFR,4BAOF,cAAC5B,GAAD,CAAa,cAAY,kBAAkB/L,KAAM,GAAI1G,QAAS8T,Y,aCxGlE9C,GAAmBvU,UAAOC,IAAV,uCAAGD,CAAH,wKAMiB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWC,GAAnC,SAIA,gBAAGF,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SA0BxBmX,UArBI,WACjB,IAAMC,EAAiBC,cAAO,SAACC,GAAD,OAAWA,EAAMF,kBAC/C,EAAmCG,eAAnC,mBAAOC,EAAP,KAAsBC,EAAtB,KAMA,OAJAlV,qBAAU,WACR6U,EAAe,CAAEM,aAAa,EAAOC,aAAa,MACjD,IAGD,mCACE,eAAC,QAAD,CAAOC,KAAMC,WAASC,iBAAkBC,qBAAmB,EAA3D,UACE,eAAC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,QAEAP,GAAiB,cAACjB,GAAD,CAAcC,YAAaiB","file":"static/js/7.47255a87.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/welcomeModal-dark.0f21fb6b.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-dark@2x.45349aad.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-dark@3x.8ea4669c.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light.9edc986b.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light@2x.a465cde5.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light@3x.c6262e4c.jpg\";","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { CollectionTableColumn, TimePeriod } from 'nft/types'\r\nimport { useMemo } from 'react'\r\nimport { CellProps, Column, Row } from 'react-table'\r\nimport { MediumOnly } from 'theme/components'\r\n\r\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\r\nimport { Table } from './Table'\r\n\r\nexport enum ColumnHeaders {\r\n  Volume = 'Volume',\r\n  VolumeChange = 'Volume change',\r\n  Floor = 'Floor',\r\n  FloorChange = 'Floor change',\r\n  Sales = 'Sales',\r\n  Items = 'Items',\r\n  Owners = 'Owners',\r\n}\r\n\r\nconst VOLUME_CHANGE_MAX_VALUE = 9999\r\n\r\nconst compareFloats = (a: number, b: number): 1 | -1 => {\r\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\r\n}\r\n\r\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\r\n  const floorSort = useMemo(() => {\r\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\r\n      const aFloor = BigNumber.from(rowA.original.floor.value ?? 0)\r\n      const bFloor = BigNumber.from(rowB.original.floor.value ?? 0)\r\n\r\n      return aFloor.gte(bFloor) ? 1 : -1\r\n    }\r\n  }, [])\r\n\r\n  const floorChangeSort = useMemo(() => {\r\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\r\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\r\n    }\r\n  }, [])\r\n\r\n  const volumeSort = useMemo(() => {\r\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\r\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\r\n    }\r\n  }, [])\r\n\r\n  const volumeChangeSort = useMemo(() => {\r\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\r\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\r\n    }\r\n  }, [])\r\n\r\n  const columns: Column<CollectionTableColumn>[] = useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Collection name',\r\n        accessor: 'collection',\r\n        Cell: CollectionTitleCell,\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        id: ColumnHeaders.Floor,\r\n        Header: ColumnHeaders.Floor,\r\n        accessor: ({ floor }) => floor.value,\r\n        sortType: floorSort,\r\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\r\n          return (\r\n            <>\r\n              <EthCell\r\n                value={cell.row.original.floor.value}\r\n                denomination={cell.row.original.denomination}\r\n                usdPrice={cell.row.original.usdPrice}\r\n              />\r\n              {timePeriod !== TimePeriod.AllTime && (\r\n                <MediumOnly>\r\n                  <ChangeCell change={cell.row.original.floor.change} />\r\n                </MediumOnly>\r\n              )}\r\n            </>\r\n          )\r\n        },\r\n      },\r\n      {\r\n        id: ColumnHeaders.FloorChange,\r\n        Header: ColumnHeaders.FloorChange,\r\n        accessor: ({ floor }) => floor.value,\r\n        sortDescFirst: true,\r\n        disableSortBy: timePeriod === TimePeriod.AllTime,\r\n        sortType: floorChangeSort,\r\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\r\n          return timePeriod === TimePeriod.AllTime ? (\r\n            <TextCell value=\"-\" />\r\n          ) : (\r\n            <ChangeCell change={cell.row.original.floor.change} />\r\n          )\r\n        },\r\n      },\r\n      {\r\n        id: ColumnHeaders.Volume,\r\n        Header: ColumnHeaders.Volume,\r\n        accessor: ({ volume }) => volume.value,\r\n        sortDescFirst: true,\r\n        sortType: volumeSort,\r\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\r\n          return (\r\n            <VolumeCell\r\n              value={cell.row.original.volume.value}\r\n              denomination={cell.row.original.denomination}\r\n              usdPrice={cell.row.original.usdPrice}\r\n            />\r\n          )\r\n        },\r\n      },\r\n      {\r\n        id: ColumnHeaders.VolumeChange,\r\n        Header: ColumnHeaders.VolumeChange,\r\n        accessor: ({ volume }) => volume.value,\r\n        sortDescFirst: true,\r\n        disableSortBy: timePeriod === TimePeriod.AllTime,\r\n        sortType: volumeChangeSort,\r\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\r\n          const { change } = cell.row.original.volume\r\n          return timePeriod === TimePeriod.AllTime ? (\r\n            <TextCell value=\"-\" />\r\n          ) : change >= VOLUME_CHANGE_MAX_VALUE ? (\r\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\r\n          ) : (\r\n            <ChangeCell change={change} />\r\n          )\r\n        },\r\n      },\r\n      {\r\n        id: ColumnHeaders.Items,\r\n        Header: ColumnHeaders.Items,\r\n        accessor: 'totalSupply',\r\n        sortDescFirst: true,\r\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\r\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\r\n        },\r\n      },\r\n      {\r\n        Header: ColumnHeaders.Owners,\r\n        accessor: ({ owners }) => owners.value,\r\n        sortDescFirst: true,\r\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\r\n          return <DiscreteNumberCell value={cell.row.original.owners} />\r\n        },\r\n      },\r\n    ],\r\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\r\n  )\r\n  return (\r\n    <>\r\n      <Table\r\n        smallHiddenColumns={[\r\n          ColumnHeaders.Items,\r\n          ColumnHeaders.FloorChange,\r\n          ColumnHeaders.Volume,\r\n          ColumnHeaders.VolumeChange,\r\n          ColumnHeaders.Owners,\r\n        ]}\r\n        mediumHiddenColumns={[\r\n          ColumnHeaders.Items,\r\n          ColumnHeaders.FloorChange,\r\n          ColumnHeaders.VolumeChange,\r\n          ColumnHeaders.Owners,\r\n        ]}\r\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\r\n        {...{ data, columns }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionTable\r\n","import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\r\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\r\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\r\nimport { a, useSprings } from 'react-spring'\r\nimport styled from 'styled-components/macro'\r\n\r\nconst CarouselContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst CarouselCardContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  overflow-x: hidden;\r\n  max-width: 100%;\r\n  height: 390px;\r\n\r\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\r\n    max-width: 600px;\r\n  }\r\n`\r\n\r\nconst CarouselItemCard = styled(a.div)`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 4px 12px 32px;\r\n  position: absolute;\r\n  will-change: transform;\r\n  width: calc(100%);\r\n  height: calc(100%);\r\n\r\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\r\n    padding: 4px 32px 32px;\r\n  }\r\n`\r\n\r\nconst CarouselItemIcon = styled.div`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  cursor: pointer;\r\n  display: none;\r\n  user-select: none;\r\n  height: calc(100%);\r\n  padding: 4px 0 32px;\r\n\r\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    display: flex;\r\n  }\r\n\r\n  :hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\ninterface CarouselProps {\r\n  children: ReactNode[]\r\n  activeIndex: number\r\n  toggleNextSlide: (idx: number) => void\r\n}\r\n\r\nconst MAX_CARD_WIDTH = 800\r\n\r\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\r\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\r\n  const getPos = useCallback(\r\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\r\n    [idx]\r\n  )\r\n  const [springs, set] = useSprings(children.length, (i) => ({\r\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\r\n  }))\r\n  const prev = useRef([0, 1])\r\n\r\n  const runSprings = useCallback(\r\n    (y: number, vy: number) => {\r\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\r\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\r\n      set((i) => {\r\n        const position = getPos(i, firstVis, firstVisIdx)\r\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\r\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\r\n        return {\r\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\r\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\r\n          config: { tension: 250, friction: 30 },\r\n        }\r\n      })\r\n      prev.current = [firstVis, firstVisIdx]\r\n    },\r\n    [idx, getPos, set, children.length]\r\n  )\r\n\r\n  const direction = useRef(0)\r\n\r\n  useEffect(() => {\r\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\r\n  }, [activeIndex, runSprings])\r\n\r\n  const toggleSlide = useCallback(\r\n    (next: -1 | 1) => {\r\n      direction.current = next\r\n      toggleNextSlide(next)\r\n    },\r\n    [toggleNextSlide]\r\n  )\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      toggleSlide(1)\r\n    }, 7_000)\r\n    return () => {\r\n      clearInterval(interval)\r\n    }\r\n  }, [toggleSlide, activeIndex])\r\n\r\n  return (\r\n    <CarouselContainer>\r\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\r\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\r\n      </CarouselItemIcon>\r\n      <CarouselCardContainer>\r\n        {springs.map(({ x }, i) => (\r\n          <CarouselItemCard key={i} style={{ x }}>\r\n            {children[i]}\r\n          </CarouselItemCard>\r\n        ))}\r\n      </CarouselCardContainer>\r\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\r\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\r\n      </CarouselItemIcon>\r\n    </CarouselContainer>\r\n  )\r\n}\r\n\r\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\r\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\r\n    {[children]}\r\n  </Carousel>\r\n)\r\n","import { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\r\nimport { loadingAnimation } from 'components/Loader/styled'\r\nimport { LoadingBubble } from 'components/Tokens/loading'\r\nimport { useCollectionQuery } from 'graphql/data/nft/Collection'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { Markets, TrendingCollection } from 'nft/types'\r\nimport { formatWeiToDecimal } from 'nft/utils'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme/components/text'\r\n\r\nconst CarouselCardBorder = styled.div`\r\n  width: 100%;\r\n  position: relative;\r\n  border-radius: 21px;\r\n  cursor: pointer;\r\n  border: 1px solid transparent;\r\n  transition-property: border-color;\r\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\r\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\r\n\r\n  :hover {\r\n    border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  }\r\n\r\n  ::after {\r\n    content: '';\r\n    opacity: 0;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    border-radius: 21px;\r\n    z-index: -1;\r\n    box-shadow: ${({ theme }) => theme.deepShadow};\r\n    transition-property: opacity;\r\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\r\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\r\n  }\r\n\r\n  :hover::after {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst CardHeaderContainer = styled.div<{ src: string }>`\r\n  position: relative;\r\n  background-image: ${({ src }) => `url(${src})`};\r\n  background-size: cover;\r\n  background-position: center;\r\n`\r\n\r\nconst LoadingCardHeaderContainer = styled.div`\r\n  position: relative;\r\n  animation: ${loadingAnimation} 1.5s infinite;\r\n  animation-fill-mode: both;\r\n  background: linear-gradient(\r\n    to left,\r\n    ${({ theme }) => theme.backgroundInteractive} 25%,\r\n    ${({ theme }) => theme.backgroundOutline} 50%,\r\n    ${({ theme }) => theme.backgroundInteractive} 75%\r\n  );\r\n  will-change: background-position;\r\n  background-size: 400%;\r\n`\r\n\r\nconst CardHeaderColumn = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  height: 202px;\r\n  justify-content: center;\r\n  padding: 0 40px;\r\n  z-index: 1;\r\n`\r\nconst IconContainer = styled.div`\r\n  display: inline;\r\n  vertical-align: text-bottom;\r\n  margin-left: 2px;\r\n`\r\nconst CollectionNameContainer = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  text-align: center;\r\n  max-height: 56px;\r\n`\r\n\r\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\r\n  width: 50%;\r\n`\r\n\r\nconst HeaderOverlay = styled.div`\r\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\r\n  bottom: 0px;\r\n  left: 0px;\r\n  position: absolute;\r\n  right: 0px;\r\n  top: 0px;\r\n  z-index: 0;\r\n\r\n  // overlay workaround for firefox only\r\n  @supports (-moz-appearance: none) {\r\n    bottom: -1px;\r\n  }\r\n`\r\n\r\nconst CollectionImage = styled.img`\r\n  width: 86px;\r\n  height: 86px;\r\n  background: ${({ theme }) => theme.accentTextLightPrimary};\r\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\r\n  border-radius: 100px;\r\n`\r\n\r\nconst LoadingCollectionImage = styled.div`\r\n  width: 86px;\r\n  height: 86px;\r\n  border-radius: 100px;\r\n  animation: ${loadingAnimation} 1.5s infinite;\r\n  animation-fill-mode: both;\r\n  background: linear-gradient(\r\n    to left,\r\n    ${({ theme }) => theme.backgroundInteractive} 25%,\r\n    ${({ theme }) => theme.backgroundOutline} 50%,\r\n    ${({ theme }) => theme.backgroundInteractive} 75%\r\n  );\r\n  will-change: background-position;\r\n  background-size: 400%;\r\n`\r\n\r\nconst LoadingTableElement = styled(LoadingBubble)`\r\n  width: 50px;\r\n`\r\n\r\nconst TableElement = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n`\r\n\r\nconst FirstColumnTextWrapper = styled.div``\r\n\r\nconst CardBottomContainer = styled.div`\r\n  display: grid;\r\n  flex: 1;\r\n  gap: 8px;\r\n  grid-template-columns: auto auto auto;\r\n  padding: 16px 16px 20px;\r\n`\r\n\r\nconst MarketplaceIcon = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n`\r\n\r\nconst CarouselCardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.backgroundSurface};\r\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n  height: 100%;\r\n\r\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\r\n    justify-self: center;\r\n  }\r\n\r\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\r\n    justify-self: right;\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.xs}px) or ((min-width: ${({ theme }) =>\r\n    theme.breakpoint.sm}px) and (max-width: 880px)) {\r\n    ${FirstColumnTextWrapper} {\r\n      display: none;\r\n    }\r\n    ${TableElement} {\r\n      justify-self: left !important;\r\n    }\r\n    ${CardHeaderColumn} {\r\n      padding: 0 20px;\r\n    }\r\n  }\r\n`\r\n\r\ninterface MarketplaceRowProps {\r\n  marketplace: string\r\n  floorInEth?: number\r\n  listings?: number\r\n}\r\n\r\nconst MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\r\n  return (\r\n    <>\r\n      <TableElement>\r\n        <MarketplaceIcon\r\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\r\n          alt={`${marketplace} icon`}\r\n        />\r\n        <FirstColumnTextWrapper>\r\n          <ThemedText.BodySmall color=\"textSecondary\">{marketplace}</ThemedText.BodySmall>\r\n        </FirstColumnTextWrapper>\r\n      </TableElement>\r\n      <TableElement>\r\n        <ThemedText.BodySmall color=\"textSecondary\">\r\n          {Number(floorInEth) > 0\r\n            ? `${formatNumberOrString(floorInEth, NumberType.NFTTokenFloorPriceTrailingZeros)} ETH`\r\n            : '-'}\r\n        </ThemedText.BodySmall>\r\n      </TableElement>\r\n      <TableElement>\r\n        <ThemedText.BodySmall color=\"textSecondary\">{Number(listings) > 0 ? listings : 'None'}</ThemedText.BodySmall>\r\n      </TableElement>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface CarouselCardProps {\r\n  collection: TrendingCollection\r\n  onClick: () => void\r\n}\r\n\r\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\r\nconst MARKETS_ENUM_TO_NAME = {\r\n  [Markets.Opensea]: 'OpenSea',\r\n  [Markets.X2Y2]: 'X2Y2',\r\n  [Markets.LooksRare]: 'LooksRare',\r\n}\r\n\r\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\r\n  const gqlCollection = useCollectionQuery(collection.address)\r\n\r\n  return (\r\n    <CarouselCardBorder>\r\n      <CarouselCardContainer onClick={onClick}>\r\n        <CarouselCardHeader collection={collection} />\r\n        <CardBottomContainer>\r\n          <>\r\n            <TableElement>\r\n              <MarketplaceIcon src=\"/nft/svgs/marketplaces/uniswap-magenta.svg\" alt=\"Uniswap icon\" />\r\n              <FirstColumnTextWrapper>\r\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\r\n              </FirstColumnTextWrapper>\r\n            </TableElement>\r\n            <TableElement>\r\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\r\n                {formatWeiToDecimal(collection.floor.toString())} ETH Floor\r\n              </ThemedText.SubHeaderSmall>\r\n            </TableElement>\r\n            <TableElement>\r\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\r\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\r\n              </ThemedText.SubHeaderSmall>\r\n            </TableElement>\r\n            {MARKETS_TO_CHECK.map((market) => {\r\n              const marketplace = gqlCollection.marketplaceCount?.find(\r\n                (marketplace) => marketplace.marketplace === market\r\n              )\r\n              if (!marketplace) {\r\n                return null\r\n              }\r\n              return (\r\n                <MarketplaceRow\r\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\r\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\r\n                  listings={marketplace.count}\r\n                  floorInEth={marketplace.floorPrice}\r\n                />\r\n              )\r\n            })}\r\n          </>\r\n        </CardBottomContainer>\r\n      </CarouselCardContainer>\r\n    </CarouselCardBorder>\r\n  )\r\n}\r\n\r\nconst DEFAULT_TABLE_ELEMENTS = 12\r\n\r\nconst LoadingTable = () => {\r\n  return (\r\n    <>\r\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\r\n        <LoadingTableElement key={index} />\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nconst CollectionName = styled(ThemedText.MediumHeader)`\r\n  display: inline;\r\n  vertical-align: text-bottom;\r\n  line-height: 28px;\r\n`\r\n\r\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\r\n  return (\r\n    <CardHeaderContainer src={collection.bannerImageUrl}>\r\n      <CardHeaderColumn>\r\n        <CollectionImage src={collection.imageUrl} />\r\n        <CollectionNameContainer>\r\n          <CollectionName color=\"accentTextLightPrimary\" fontWeight=\"500\">\r\n            {collection.name}\r\n          </CollectionName>\r\n          {collection.isVerified && (\r\n            <IconContainer>\r\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\r\n            </IconContainer>\r\n          )}\r\n        </CollectionNameContainer>\r\n      </CardHeaderColumn>\r\n      <HeaderOverlay />\r\n    </CardHeaderContainer>\r\n  )\r\n}\r\n\r\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\r\n  return (\r\n    <CarouselCardBorder>\r\n      <CarouselCardContainer>\r\n        {collection ? (\r\n          <CarouselCardHeader collection={collection} />\r\n        ) : (\r\n          <LoadingCardHeaderContainer>\r\n            <CardHeaderColumn>\r\n              <LoadingCollectionImage />\r\n              <LoadingCollectionNameContainer />\r\n            </CardHeaderColumn>\r\n            <HeaderOverlay />\r\n          </LoadingCardHeaderContainer>\r\n        )}\r\n        <CardBottomContainer>\r\n          <LoadingTable />\r\n        </CardBottomContainer>\r\n      </CarouselCardContainer>\r\n    </CarouselCardBorder>\r\n  )\r\n}\r\n","import { useLoadCollectionQuery } from 'graphql/data/nft/Collection'\r\nimport { fetchTrendingCollections } from 'nft/queries'\r\nimport { TimePeriod } from 'nft/types'\r\nimport { calculateCardIndex } from 'nft/utils'\r\nimport { Suspense, useCallback, useMemo, useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport styled from 'styled-components/macro'\r\nimport { opacify } from 'theme/utils'\r\n\r\nimport { Carousel, LoadingCarousel } from './Carousel'\r\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\r\n\r\nconst BannerContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n  padding-top: 22px;\r\n  position: relative;\r\n\r\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    padding: 32px 16px;\r\n  }\r\n`\r\n\r\nconst AbsoluteFill = styled.div`\r\n  position: absolute;\r\n  top: -96px;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n`\r\n\r\n// Safari has issues with blur / overflow, forcing GPU rendering with `translate3d` fixes it\r\n// https://stackoverflow.com/a/71353198\r\nconst BannerBackground = styled(AbsoluteFill) <{ backgroundImage: string }>`\r\n  transform: translate3d(0, 0, 0) scaleY(1.1);\r\n\r\n  background-image: ${(props) => `url(${props.backgroundImage})`};\r\n  filter: blur(62px);\r\n\r\n  opacity: ${({ theme }) => (theme.darkMode ? 0.3 : 0.2)};\r\n`\r\n\r\nconst PlainBackground = styled(AbsoluteFill)`\r\n  background: ${({ theme }) => `linear-gradient(${opacify(10, theme.userThemeColor)}, transparent)`};\r\n`\r\n\r\nconst BannerMainArea = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  height: 100%;\r\n  gap: 36px;\r\n  max-width: 1200px;\r\n  justify-content: space-between;\r\n  z-index: 2;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    flex-direction: column;\r\n    height: 100%;\r\n    gap: 14px;\r\n    margin-top: 4px;\r\n    margin-bottom: 6px;\r\n  }\r\n`\r\n\r\nconst HeaderContainer = styled.div`\r\n  display: flex;\r\n  max-width: 500px;\r\n  font-weight: 500;\r\n  font-size: 72px;\r\n  line-height: 88px;\r\n  align-self: center;\r\n  flex-shrink: 0;\r\n  padding-bottom: 32px;\r\n\r\n  color: ${({ theme }) => theme.textPrimary};\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\r\n    font-size: 48px;\r\n    line-height: 67px;\r\n  }\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\r\n    font-size: 36px;\r\n    line-height: 50px;\r\n  }\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    line-height: 43px;\r\n    text-align: center;\r\n    padding-bottom: 16px;\r\n\r\n    br {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  /* Custom breakpoint to split into two lines on smaller screens */\r\n  @media only screen and (max-width: 550px) {\r\n    font-size: 28px;\r\n    line-height: 34px;\r\n    padding-bottom: 0;\r\n\r\n    br {\r\n      display: unset;\r\n    }\r\n  }\r\n`\r\n\r\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\r\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\r\nconst TRENDING_COLLECTION_SIZE = 5\r\n\r\nconst Banner = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const { data } = useQuery(\r\n    ['trendingCollections'],\r\n    () => {\r\n      return fetchTrendingCollections({\r\n        volumeType: 'eth',\r\n        timePeriod: TimePeriod.OneDay,\r\n        size: TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\r\n      })\r\n    },\r\n    {\r\n      refetchOnReconnect: false,\r\n      refetchOnWindowFocus: false,\r\n      refetchOnMount: false,\r\n    }\r\n  )\r\n\r\n  const collections = useMemo(\r\n    () => data?.filter((collection) => !EXCLUDED_COLLECTIONS.includes(collection.address)).slice(0, 5),\r\n    [data]\r\n  )\r\n\r\n  // Trigger queries for the top trending collections, so that the data is immediately available if the user clicks through.\r\n  const collectionAddresses = useMemo(() => collections?.map(({ address }) => address), [collections])\r\n  useLoadCollectionQuery(collectionAddresses)\r\n\r\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\r\n  const onToggleNextSlide = useCallback(\r\n    (direction: number) => {\r\n      if (!collections) return\r\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\r\n    },\r\n    [collections]\r\n  )\r\n\r\n  const activeCollection = collections?.[activeCollectionIdx]\r\n\r\n  return (\r\n    <BannerContainer>\r\n      {activeCollection ? (\r\n        activeCollection.bannerImageUrl ? (\r\n          <BannerBackground backgroundImage={activeCollection.bannerImageUrl} />\r\n        ) : (\r\n          <PlainBackground />\r\n        )\r\n      ) : null}\r\n      <BannerMainArea>\r\n        <HeaderContainer>\r\n          Better prices. <br />\r\n          More listings.\r\n        </HeaderContainer>\r\n        {collections ? (\r\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\r\n            {collections.map((collection) => (\r\n              <Suspense fallback={<LoadingCarouselCard collection={collection} />} key={collection.address}>\r\n                <CarouselCard\r\n                  key={collection.address}\r\n                  collection={collection}\r\n                  onClick={() => navigate(`/nfts/collection/${collection.address}`)}\r\n                />\r\n              </Suspense>\r\n            ))}\r\n          </Carousel>\r\n        ) : (\r\n          <LoadingCarousel>\r\n            <LoadingCarouselCard />\r\n          </LoadingCarousel>\r\n        )}\r\n      </BannerMainArea>\r\n    </BannerContainer>\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import { formatEther } from '@ethersproject/units'\r\nimport { SquareArrowDownIcon, SquareArrowUpIcon, VerifiedIcon } from 'nft/components/icons'\r\nimport { useIsMobile } from 'nft/hooks'\r\nimport { Denomination } from 'nft/types'\r\nimport { volumeFormatter } from 'nft/utils'\r\nimport { ReactNode } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\n\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from '../../../utils/currency'\r\nimport * as styles from './Cells.css'\r\n\r\nconst TruncatedText = styled.div`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst CollectionNameContainer = styled(TruncatedText)`\r\n  display: flex;\r\n  padding: 14px 0px 14px 8px;\r\n  align-items: center;\r\n`\r\n\r\nconst CollectionName = styled(TruncatedText)`\r\n  margin-left: 8px;\r\n`\r\n\r\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\nconst TruncatedSubHeaderSmall = styled(ThemedText.SubHeaderSmall)`\r\n  color: ${({ theme }) => `${theme.textPrimary}`};\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst RoundedImage = styled.div<{ src?: string }>`\r\n  height: 36px;\r\n  width: 36px;\r\n  border-radius: 36px;\r\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.backgroundModule)};\r\n  background-size: cover;\r\n  background-position: center;\r\n  flex-shrink: 0;\r\n`\r\n\r\nconst ChangeCellContainer = styled.div<{ change: number }>`\r\n  display: flex;\r\n  color: ${({ theme, change }) => (change >= 0 ? theme.accentSuccess : theme.accentFailure)};\r\n  justify-content: end;\r\n  align-items: center;\r\n  gap: 2px;\r\n`\r\n\r\nconst EthContainer = styled.div`\r\n  display: flex;\r\n  justify-content: end;\r\n`\r\n\r\ninterface CellProps {\r\n  value: {\r\n    logo?: string\r\n    name?: string\r\n    address?: string\r\n    isVerified?: boolean\r\n    value?: number\r\n    change?: number\r\n  }\r\n}\r\n\r\nexport const CollectionTitleCell = ({ value }: CellProps) => {\r\n  const isMobile = useIsMobile()\r\n  return (\r\n    <CollectionNameContainer>\r\n      <RoundedImage src={value.logo} />\r\n      <CollectionName>\r\n        {isMobile ? (\r\n          <TruncatedSubHeaderSmall>{value.name}</TruncatedSubHeaderSmall>\r\n        ) : (\r\n          <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\r\n        )}\r\n      </CollectionName>\r\n      {value.isVerified && (\r\n        <span className={styles.verifiedBadge}>\r\n          <VerifiedIcon />\r\n        </span>\r\n      )}\r\n    </CollectionNameContainer>\r\n  )\r\n}\r\n\r\nexport const DiscreteNumberCell = ({ value }: CellProps) => (\r\n  <span>{value.value ? volumeFormatter(value.value) : '-'}</span>\r\n)\r\n\r\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\r\n  if (denomination === Denomination.ETH) return value\r\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\r\n\r\n  return undefined\r\n}\r\n\r\nexport const EthCell = ({\r\n  value,\r\n  denomination,\r\n  usdPrice,\r\n}: {\r\n  value?: number\r\n  denomination: Denomination\r\n  usdPrice?: number\r\n}) => {\r\n  const denominatedValue = getDenominatedValue(denomination, true, value, usdPrice)\r\n  const formattedValue = denominatedValue\r\n    ? denomination === Denomination.ETH\r\n      ? formatWeiToDecimal(denominatedValue.toString(), true) + ' ETH'\r\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\r\n    : '-'\r\n\r\n  const isMobile = useIsMobile()\r\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\r\n\r\n  return (\r\n    <EthContainer>\r\n      <TextComponent>{value ? formattedValue : '-'}</TextComponent>\r\n    </EthContainer>\r\n  )\r\n}\r\n\r\nexport const TextCell = ({ value }: { value: string }) => <ThemedText.BodyPrimary>{value}</ThemedText.BodyPrimary>\r\n\r\nexport const VolumeCell = ({\r\n  value,\r\n  denomination,\r\n  usdPrice,\r\n}: {\r\n  value?: number\r\n  denomination: Denomination\r\n  usdPrice?: number\r\n}) => {\r\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\r\n\r\n  const formattedValue = denominatedValue\r\n    ? denomination === Denomination.ETH\r\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, false, true) + ' ETH'\r\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\r\n    : '-'\r\n\r\n  return (\r\n    <EthContainer>\r\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\r\n    </EthContainer>\r\n  )\r\n}\r\n\r\nexport const ChangeCell = ({ change, children }: { children?: ReactNode; change?: number }) => {\r\n  const isMobile = useIsMobile()\r\n  const TextComponent = isMobile ? ThemedText.Caption : ThemedText.BodyPrimary\r\n  return (\r\n    <ChangeCellContainer change={change ?? 0}>\r\n      {!change || change > 0 ? (\r\n        <SquareArrowUpIcon width=\"20px\" height=\"20px\" />\r\n      ) : (\r\n        <SquareArrowDownIcon width=\"20px\" height=\"20px\" />\r\n      )}\r\n      <TextComponent color=\"currentColor\">{children || `${change ? Math.abs(Math.round(change)) : 0}%`}</TextComponent>\r\n    </ChangeCellContainer>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZCB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRkOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZiB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGY6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRnOjpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBpbnNldDogLTFweDsKICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTEuNDZkZWcsICM0NjczRkEgMCUsICM5NjQ2RkEgMTAwLjEzJSkgYm9yZGVyLWJveDsKICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50OwogIC13ZWJraXQtbWFzazogbGluZWFyLWdyYWRpZW50KCNmZmYgMCAwKSBwYWRkaW5nLWJveCwgbGluZWFyLWdyYWRpZW50KCNmZmYgMCAwKTs7CiAgLXdlYmtpdC1tYXNrLWNvbXBvc2l0ZTogeG9yOzsKICBtYXNrLWNvbXBvc2l0ZTogZXhjbHVkZTsKICBib3JkZXItc3R5bGU6IHNvbGlkOwogIGJvcmRlci13aWR0aDogMXB4OwogIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0KLl8xMjdsOGhkaDo6YmVmb3JlIHsKICBvcGFjaXR5OiAwOwogIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIC1tb3otdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIC1tcy10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlLW91dDsKfQouXzEyN2w4aGRoOmhvdmVyOjpiZWZvcmUgewogIG9wYWNpdHk6IDE7Cn0KLl8xMjdsOGhkajpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tcmd3NmV6MXcpOwp9\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var logo = 'rgw6ez77v';\nexport var title = 'rgw6ezcp rgw6ezb1 rgw6ez7lf rgw6ez4av rgw6ez42d rgw6ez7if rgw6ez421 rgw6ez427 rgw6ez2a7 rgw6ez2ev';\nexport var address = 'rgw6ezcp rgw6ezb1 rgw6ez7lf rgw6ez4av rgw6ez42d rgw6ez7if rgw6ez421 rgw6ez427 rgw6ez2a7 rgw6ez2ev rgw6ezjv rgw6ez3j rgw6ez1jj rgw6ez15d';\nexport var verifiedBadge = 'rgw6ezjj rgw6ez41j rgw6ez2kj rgw6ez17v rgw6ez117 rgw6ez42d';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZCB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRkOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZiB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGY6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRnOjpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBpbnNldDogLTFweDsKICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTEuNDZkZWcsICM0NjczRkEgMCUsICM5NjQ2RkEgMTAwLjEzJSkgYm9yZGVyLWJveDsKICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50OwogIC13ZWJraXQtbWFzazogbGluZWFyLWdyYWRpZW50KCNmZmYgMCAwKSBwYWRkaW5nLWJveCwgbGluZWFyLWdyYWRpZW50KCNmZmYgMCAwKTs7CiAgLXdlYmtpdC1tYXNrLWNvbXBvc2l0ZTogeG9yOzsKICBtYXNrLWNvbXBvc2l0ZTogZXhjbHVkZTsKICBib3JkZXItc3R5bGU6IHNvbGlkOwogIGJvcmRlci13aWR0aDogMXB4OwogIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0KLl8xMjdsOGhkaDo6YmVmb3JlIHsKICBvcGFjaXR5OiAwOwogIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIC1tb3otdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIC1tcy10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlLW91dDsKfQouXzEyN2w4aGRoOmhvdmVyOjpiZWZvcmUgewogIG9wYWNpdHk6IDE7Cn0KLl8xMjdsOGhkajpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tcmd3NmV6MXcpOwp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC40cyBlYXNlOwp9Ci5fMW1vcjd2ZTggewogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KLl8xbW9yN3ZlYSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgxNTMsIDE2MSwgMTg5LCAwLjI0KTsKICBib3JkZXItc3BhY2luZzogMHB4IDQwcHg7Cn0KLl8xbW9yN3ZlZDpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVmOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWg6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1mor7ve1 rgw6ez2aj rgw6ez294 rgw6ez2g1 rgw6ez2em';\nexport var activityRow = '_1mor7ve3 rgw6ez451 rgw6ez3d rgw6ez3l';\nexport var activeRow = 'rgw6ez6h1';\nexport var timestamp = 'rgw6ez451 rgw6ezap rgw6ez4gd rgw6ez3bd rgw6ez379 rgw6ez347 rgw6ez35x rgw6ez3dp rgw6ez3gx';\nexport var marketplaceIcon = '_1mor7ve8 rgw6ez10d rgw6ez171 rgw6ez77j rgw6ez3u7 rgw6ezjv';\nexport var table = '_1mor7vea rgw6ez4lp rgw6ez151 rgw6ez77v rgw6ez76j';\nexport var thead = 'rgw6ezpp rgw6ez4x1 rgw6ez7g3 rgw6ez773';\nexport var th = '_1mor7ved rgw6ezcp rgw6ezav rgw6ez7lb rgw6ez4b1 rgw6ez2l7 rgw6ez24p';\nexport var td = '_1mor7vef rgw6ezcp rgw6ezb1 rgw6ez7lf rgw6ez2kj rgw6ez241 rgw6ez1h7 rgw6ez42j rgw6ez45d';\nexport var loadingTd = '_1mor7veh rgw6ezcp rgw6ezb1 rgw6ez7lf rgw6ez2kv rgw6ez24d rgw6ez1h7 rgw6ez42j rgw6ez45d';","import { TraceEvent } from '@uniswap/analytics'\r\nimport { BrowserEvent, ElementName, EventName } from '@uniswap/analytics-events'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { LoadingBubble } from 'components/Tokens/loading'\r\nimport { useWindowSize } from 'hooks/useWindowSize'\r\nimport { useIsMobile } from 'nft/hooks'\r\nimport { useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { GlowEffect, ThemedText } from 'theme'\r\n\r\nimport { Box } from '../../components/Box'\r\nimport { CollectionTableColumn } from '../../types'\r\nimport { ArrowRightIcon } from '../icons'\r\nimport { ColumnHeaders } from './CollectionTable'\r\nimport * as styles from './Explore.css'\r\n\r\n// Default table cell max width\r\nconst CELL_WIDTH = '160px'\r\n// Collection Name cell max widths\r\nconst MOBILE_CELL_WIDTH = '240px'\r\nconst DESKTOP_CELL_WIDTH = '360px'\r\n\r\nconst RankCellContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-left: 24px;\r\n  gap: 12px;\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    padding-left: 8px;\r\n  }\r\n`\r\n\r\nconst StyledRow = styled.tr`\r\n  cursor: pointer;\r\n  :hover {\r\n    background: ${({ theme }) => theme.stateOverlayHover};\r\n  }\r\n  :active {\r\n    background: ${({ theme }) => theme.stateOverlayPressed};\r\n  }\r\n`\r\n\r\nconst StyledLoadingRow = styled.tr`\r\n  height: 80px;\r\n`\r\n\r\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\r\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\r\n\r\n  :hover {\r\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\r\n  }\r\n\r\n  :active {\r\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\r\n  }\r\n`\r\n\r\nconst StyledLoadingHolder = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: end;\r\n  align-items: center;\r\n`\r\n\r\nconst StyledCollectionNameHolder = styled.div`\r\n  display: flex;\r\n  margin-left: 24px;\r\n  gap: 8px;\r\n  align-items: center;\r\n`\r\n\r\nconst StyledImageHolder = styled(LoadingBubble)`\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 36px;\r\n`\r\n\r\nconst StyledRankHolder = styled(LoadingBubble)`\r\n  width: 8px;\r\n  height: 16px;\r\n  margin-right: 12px;\r\n`\r\n\r\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\r\n\r\ninterface TableProps<D extends Record<string, unknown>> {\r\n  columns: Column<CollectionTableColumn>[]\r\n  data: CollectionTableColumn[]\r\n  smallHiddenColumns: IdType<D>[]\r\n  mediumHiddenColumns: IdType<D>[]\r\n  largeHiddenColumns: IdType<D>[]\r\n}\r\nexport function Table<D extends Record<string, unknown>>({\r\n  columns,\r\n  data,\r\n  smallHiddenColumns,\r\n  mediumHiddenColumns,\r\n  largeHiddenColumns,\r\n  ...props\r\n}: TableProps<D>) {\r\n  const theme = useTheme()\r\n  const { chainId } = useWeb3React()\r\n  const { width } = useWindowSize()\r\n  const isMobile = useIsMobile()\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        initialState: {\r\n          sortBy: [\r\n            {\r\n              desc: true,\r\n              id: ColumnHeaders.Volume,\r\n            },\r\n          ],\r\n        },\r\n        ...props,\r\n      },\r\n      useSortBy\r\n    )\r\n\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    if (!width) return\r\n\r\n    if (width <= theme.breakpoint.sm) {\r\n      setHiddenColumns(smallHiddenColumns)\r\n    } else if (width <= theme.breakpoint.md) {\r\n      setHiddenColumns(mediumHiddenColumns)\r\n    } else if (width <= theme.breakpoint.lg) {\r\n      setHiddenColumns(largeHiddenColumns)\r\n    } else {\r\n      setHiddenColumns([])\r\n    }\r\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\r\n\r\n  if (data.length === 0) {\r\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\r\n  }\r\n\r\n  return (\r\n    <GlowEffect>\r\n      <table {...getTableProps()} className={styles.table}>\r\n        <thead className={styles.thead}>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\r\n              {headerGroup.headers.map((column, index) => {\r\n                return (\r\n                  <StyledHeader\r\n                    className={styles.th}\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    style={{\r\n                      textAlign: index === 0 ? 'left' : 'right',\r\n                      paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\r\n                    }}\r\n                    disabled={column.disableSortBy}\r\n                    key={index}\r\n                  >\r\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\r\n                      {column.isSorted ? (\r\n                        column.isSortedDesc ? (\r\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\r\n                        ) : (\r\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\r\n                        )\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </Box>\r\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\r\n                      {column.render('Header')}\r\n                    </Box>\r\n                  </StyledHeader>\r\n                )\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row)\r\n\r\n            return (\r\n              <TraceEvent\r\n                events={[BrowserEvent.onClick]}\r\n                name={EventName.NFT_TRENDING_ROW_SELECTED}\r\n                properties={{ collection_address: row.original.collection.address, chain_id: chainId }}\r\n                element={ElementName.NFT_TRENDING_ROW}\r\n                key={i}\r\n              >\r\n                <StyledRow\r\n                  {...row.getRowProps()}\r\n                  key={row.id}\r\n                  onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\r\n                  data-testid=\"nft-trending-collection\"\r\n                >\r\n                  {row.cells.map((cell, cellIndex) => {\r\n                    return (\r\n                      <td\r\n                        className={styles.td}\r\n                        {...cell.getCellProps()}\r\n                        key={cellIndex}\r\n                        style={{\r\n                          maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\r\n                        }}\r\n                      >\r\n                        {cellIndex === 0 ? (\r\n                          <RankCellContainer>\r\n                            {!isMobile && (\r\n                              <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\r\n                                {i + 1}\r\n                              </ThemedText.BodySecondary>\r\n                            )}\r\n                            {cell.render('Cell')}\r\n                          </RankCellContainer>\r\n                        ) : (\r\n                          cell.render('Cell')\r\n                        )}\r\n                      </td>\r\n                    )\r\n                  })}\r\n                </StyledRow>\r\n              </TraceEvent>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </GlowEffect>\r\n  )\r\n}\r\n\r\ninterface LoadingTableProps {\r\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\r\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\r\n}\r\n\r\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\r\n  return (\r\n    <GlowEffect>\r\n      <table {...props} className={styles.table}>\r\n        <thead className={styles.thead}>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\r\n              {headerGroup.headers.map((column, index) => {\r\n                return (\r\n                  <StyledHeader\r\n                    className={styles.th}\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    style={{\r\n                      textAlign: index === 0 ? 'left' : 'right',\r\n                      paddingLeft: index === 0 ? '52px' : 0,\r\n                    }}\r\n                    disabled={index === 0}\r\n                    key={index}\r\n                  >\r\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\r\n                      {column.isSorted ? (\r\n                        column.isSortedDesc ? (\r\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\r\n                        ) : (\r\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\r\n                        )\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </Box>\r\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\r\n                      {column.render('Header')}\r\n                    </Box>\r\n                  </StyledHeader>\r\n                )\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...props}>\r\n          {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\r\n            <StyledLoadingRow key={index}>\r\n              {[...Array(visibleColumns.length)].map((_, cellIndex) => {\r\n                return (\r\n                  <td className={styles.loadingTd} key={cellIndex}>\r\n                    {cellIndex === 0 ? (\r\n                      <StyledCollectionNameHolder>\r\n                        <StyledRankHolder />\r\n                        <StyledImageHolder />\r\n                        <LoadingBubble />\r\n                      </StyledCollectionNameHolder>\r\n                    ) : (\r\n                      <StyledLoadingHolder>\r\n                        <LoadingBubble />\r\n                      </StyledLoadingHolder>\r\n                    )}\r\n                  </td>\r\n                )\r\n              })}\r\n            </StyledLoadingRow>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </GlowEffect>\r\n  )\r\n}\r\n","import { OpacityHoverState } from 'components/Common'\r\nimport ms from 'ms.macro'\r\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\r\nimport { fetchPrice } from 'nft/utils'\r\nimport { useMemo, useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\n\r\nimport { fetchTrendingCollections } from '../../queries'\r\nimport CollectionTable from './CollectionTable'\r\n\r\nconst timeOptions: { label: string; value: TimePeriod }[] = [\r\n  { label: '1D', value: TimePeriod.OneDay },\r\n  { label: '1W', value: TimePeriod.SevenDays },\r\n  { label: '1M', value: TimePeriod.ThirtyDays },\r\n  { label: 'All', value: TimePeriod.AllTime },\r\n]\r\n\r\nconst ExploreContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  padding: 0 16px;\r\n`\r\n\r\nconst StyledHeader = styled.div`\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  font-size: 36px;\r\n  line-height: 44px;\r\n  weight: 500;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    font-size: 20px;\r\n    line-height: 28px;\r\n  }\r\n`\r\n\r\nconst FiltersRow = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 36px;\r\n  margin-bottom: 20px;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    margin-bottom: 16px;\r\n    margin-top: 16px;\r\n  }\r\n`\r\n\r\nconst Filter = styled.div`\r\n  display: flex;\r\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  border-radius: 16px;\r\n  padding: 4px;\r\n`\r\n\r\nconst Selector = styled.div<{ active: boolean }>`\r\n  padding: 8px 12px;\r\n  border-radius: 12px;\r\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\r\n  cursor: pointer;\r\n\r\n  ${OpacityHoverState}\r\n`\r\n\r\nconst StyledSelectorText = styled(ThemedText.SubHeader) <{ active: boolean }>`\r\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\r\n`\r\n\r\nconst TrendingCollections = () => {\r\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\r\n  const [isEthToggled, setEthToggled] = useState(true)\r\n\r\n  const { isSuccess, data } = useQuery(\r\n    ['trendingCollections', timePeriod],\r\n    () => {\r\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod, size: 100 })\r\n    },\r\n    {\r\n      refetchOnReconnect: false,\r\n      refetchOnWindowFocus: false,\r\n      refetchOnMount: false,\r\n      refetchInterval: 5000,\r\n    }\r\n  )\r\n\r\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\r\n    refetchOnReconnect: false,\r\n    refetchOnWindowFocus: false,\r\n    refetchOnMount: false,\r\n    refetchInterval: ms`1m`,\r\n  })\r\n\r\n  const trendingCollections = useMemo(() => {\r\n    if (isSuccess && data) {\r\n      return data.map((d) => ({\r\n        ...d,\r\n        collection: {\r\n          name: d.name,\r\n          logo: d.imageUrl,\r\n          address: d.address,\r\n          isVerified: d.isVerified,\r\n        },\r\n        volume: {\r\n          value: d.volume,\r\n          change: d.volumeChange,\r\n          type: 'eth' as VolumeType,\r\n        },\r\n        floor: {\r\n          value: d.floor,\r\n          change: d.floorChange,\r\n        },\r\n        owners: {\r\n          value: d.owners,\r\n          change: d.ownersChange,\r\n        },\r\n        sales: d.sales,\r\n        totalSupply: d.totalSupply,\r\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\r\n        usdPrice,\r\n      }))\r\n    } else return [] as CollectionTableColumn[]\r\n  }, [data, isSuccess, isEthToggled, usdPrice])\r\n\r\n  return (\r\n    <ExploreContainer>\r\n      <StyledHeader>Trending NFT collections</StyledHeader>\r\n      <FiltersRow>\r\n        <Filter>\r\n          {timeOptions.map((timeOption) => {\r\n            return (\r\n              <Selector\r\n                key={timeOption.value}\r\n                active={timeOption.value === timePeriod}\r\n                onClick={() => setTimePeriod(timeOption.value)}\r\n              >\r\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\r\n                  {timeOption.label}\r\n                </StyledSelectorText>\r\n              </Selector>\r\n            )\r\n          })}\r\n        </Filter>\r\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\r\n          <Selector active={isEthToggled}>\r\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\r\n              ETH\r\n            </StyledSelectorText>\r\n          </Selector>\r\n          <Selector active={!isEthToggled}>\r\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\r\n              USD\r\n            </StyledSelectorText>\r\n          </Selector>\r\n        </Filter>\r\n      </FiltersRow>\r\n      <CollectionTable data={trendingCollections} timePeriod={timePeriod} />\r\n    </ExploreContainer>\r\n  )\r\n}\r\n\r\nexport default TrendingCollections\r\n","/* eslint-disable @typescript-eslint/no-var-requires */\r\n\r\nimport Modal from 'components/Modal'\r\nimport { useState } from 'react'\r\nimport { X } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components/macro'\r\nimport { ExternalLink } from 'theme/components'\r\nimport { ThemedText } from 'theme/components/text'\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  padding: 30% 24px 24px;\r\n  overflow: hidden;\r\n  height: fit-content;\r\n  user-select: none;\r\n`\r\n\r\nconst CloseButton = styled(X)`\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 24px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst Background = styled.img`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  object-fit: contain;\r\n`\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  z-index: 1;\r\n  gap: 16px;\r\n`\r\n\r\nconst Link = styled(ExternalLink)`\r\n  color: ${({ theme }) => theme.accentActive};\r\n  stroke: ${({ theme }) => theme.accentActive};\r\n`\r\n\r\nconst Title = styled(ThemedText.LargeHeader)`\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.xl}px) {\r\n    font-size: 20px !important;\r\n  }\r\n`\r\n\r\nconst Paragraph = styled(ThemedText.BodySecondary)`\r\n  line-height: 24px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.xl}px) {\r\n    font-size: 14px !important;\r\n    line-height: 20px;\r\n  }\r\n`\r\n\r\nconst BACKGROUND_IMAGE = {\r\n  dark: {\r\n    src: require('../../../assets/images/welcomeModal-dark.jpg').default,\r\n    srcSet: `\r\n      ${require('../../../assets/images/welcomeModal-dark@2x.jpg').default} 2x,\r\n      ${require('../../../assets/images/welcomeModal-dark@3x.jpg').default} 3x,\r\n    `,\r\n  },\r\n  light: {\r\n    src: require('../../../assets/images/welcomeModal-light.jpg').default,\r\n    srcSet: `\r\n      ${require('../../../assets/images/welcomeModal-light@2x.jpg').default} 2x,\r\n      ${require('../../../assets/images/welcomeModal-light@3x.jpg').default} 3x,\r\n    `,\r\n  },\r\n}\r\n\r\nexport function WelcomeModal({ onDismissed }: { onDismissed: () => void }) {\r\n  const [isOpen, setIsOpen] = useState(true)\r\n\r\n  const dismiss = () => {\r\n    setIsOpen(false)\r\n    setTimeout(() => onDismissed())\r\n  }\r\n\r\n  const theme = useTheme()\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onSwipe={dismiss} maxWidth={720} isBottomSheet={false}>\r\n      <Container>\r\n        <Background\r\n          {...(theme.darkMode ? BACKGROUND_IMAGE.dark : BACKGROUND_IMAGE.light)}\r\n          alt=\"Welcome modal background\"\r\n          draggable={false}\r\n        />\r\n        <Content>\r\n          <Title>Introducing NFTs on Uniswap</Title>\r\n          <Paragraph>\r\n            You can now buy and sell NFTs on Uniswap across marketplaces. Trade here to find more listings and better\r\n            prices. <br />\r\n            <br />\r\n            NFTs on Uniswap replaces Genie, which was{' '}\r\n            <Link href=\"https://uniswap.org/blog/genie\" title=\"Uniswap Labs has acquired Genie\">\r\n              acquired{' '}\r\n            </Link>{' '}\r\n            by Uniswap Labs earlier this year. If you have used Genie in the past, you may be eligible for a USDC\r\n            airdrop.{' '}\r\n            <Link\r\n              href=\"https://uniswap.org/blog/uniswap-nft-aggregator-announcement\"\r\n              title=\"Uniswap NFT aggregator announcement\"\r\n            >\r\n              Learn more.\r\n            </Link>\r\n          </Paragraph>\r\n          <CloseButton data-testid=\"nft-intro-modal\" size={24} onClick={dismiss} />\r\n        </Content>\r\n      </Container>\r\n    </Modal>\r\n  )\r\n}\r\n","import { Trace } from '@uniswap/analytics'\r\nimport { PageName } from '@uniswap/analytics-events'\r\nimport Banner from 'nft/components/explore/Banner'\r\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\r\nimport { WelcomeModal } from 'nft/components/explore/WelcomeModal'\r\nimport { useBag } from 'nft/hooks'\r\nimport { useEffect } from 'react'\r\nimport { useHideNFTWelcomeModal } from 'state/user/hooks'\r\nimport styled from 'styled-components/macro'\r\n\r\nconst ExploreContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\r\n    gap: 16px;\r\n  }\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    gap: 0px;\r\n  }\r\n`\r\n\r\nconst NftExplore = () => {\r\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\r\n  const [isModalHidden, hideModal] = useHideNFTWelcomeModal()\r\n\r\n  useEffect(() => {\r\n    setBagExpanded({ bagExpanded: false, manualClose: false })\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Trace page={PageName.NFT_EXPLORE_PAGE} shouldLogImpression>\r\n        <ExploreContainer>\r\n          <Banner />\r\n          <TrendingCollections />\r\n        </ExploreContainer>\r\n        {!isModalHidden && <WelcomeModal onDismissed={hideModal} />}\r\n      </Trace>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NftExplore\r\n"],"sourceRoot":""}