{"version":3,"sources":["nft/components/bag/BagFooter.tsx","nft/components/bag/BagFooter.css.ts","nft/components/bag/profile/ListingSection.tsx","nft/components/bag/profile/ListingModal.tsx","nft/components/bag/Bag.css.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx"],"names":["Footer","styled","div","theme","backgroundOutline","textPrimary","WarningIcon","AlertTriangle","accentWarning","WarningText","ThemedText","BodyPrimary","ActionButton","disabled","children","onClick","as","color","className","Warning","fontSize","lineHeight","PENDING_BAG_STATUSES","BagStatus","FETCHING_ROUTE","CONFIRMING_IN_WALLET","FETCHING_FINAL_ROUTE","PROCESSING_TRANSACTION","BagFooter","totalEthPrice","totalUsdPrice","bagStatus","fetchAssets","eventProperties","toggleWalletModal","useToggleWalletModal","useWeb3React","account","chainId","connector","connected","Boolean","setBagExpanded","useBag","state","balanceInEth","useWalletBalance","balance","sufficientBalance","useMemo","SupportedChainId","MAINNET","parseEther","gte","handleClick","buttonText","warningText","switchChain","WARNING","bagExpanded","isPending","includes","gap","paddingTop","paddingBottom","justifyContent","Box","HeadlineSmall","formatWeiToDecimal","toString","bodySmall","ethNumberStandardFormatter","events","BrowserEvent","name","EventName","NFT_BUY_BAG_PAY","element","ElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","size","stroke","ListingSection","sectionTitle","caption","undefined","title","rows","index","openIndex","isSuccessScreen","useState","isOpen","setIsOpen","notAllApproved","some","row","status","ListingStatus","APPROVED","sellAssets","useSellAsset","removeAssetMarketplace","removeRow","asset","asset_contract","address","collectionAddress","marketplace","getListingRowPrice","listingRow","newListings","find","listing","price","useEffect","allApproved","length","flexWrap","subhead","marginTop","marginBottom","style","marginRight","clsx","styles","width","fontWeight","badge","map","images","image","height","borderRadius","zIndex","src","alt","marginLeft","textOverflow","overflow","whiteSpace","maxWidth","sm","md","REJECTED","FAILED","formatEthPrice","numberToWei","SIGNING","buttonTextSmall","border","cursor","backgroundColor","e","a","stopPropagation","callback","ListingModal","provider","signer","getSigner","listings","useNFTList","setListings","collectionsRequiringApproval","setCollectionsRequiringApproval","setOpenIndex","listingStatus","setListingStatus","allCollectionsApproved","setAllCollectionsApproved","looksRareNonce","setLooksRareNonce","getLooksRareNonce","toggleCart","toggleBag","looksRareNonceRef","useRef","isMobile","useIsMobile","trace","useTrace","modal","ModalName","NFT_LISTING","subscribe","current","totalEthListingValue","getTotalEthValue","ethPriceInUSD","setEthPriceInUSD","fetchPrice","then","startListingEventProperties","collection_addresses","token_ids","tokenId","marketplaces","Array","from","Set","list_quantity","usd_value","approvalEventProperties","every","collection","PENDING","CONTINUE","resetAllRows","signListings","allCollectionsApprovedOrPaused","PAUSED","allListingsApprovedOrPaused","startListingFlow","sendAnalyticsEvent","NFT_SELL_START_LISTING","addresses","addressesByNetwork","getAddress","signerAddress","looksRareNonceFetcher","nonce","looksRareAddress","TRANSFER_MANAGER_ERC721","collectionRow","verifyStatus","approveCollectionRow","pauseAllRows","signListingRow","allListingsSigned","paused","NFT_LISTING_COMPLETED","signatures_requested","signatures_approved","filter","logListing","pauseRow","resetRow","showSuccessScreen","paddingLeft","paddingRight","headlineSmall","display","fill","themeVars","colors","overflowX","overflowY","maxHeight","pluralize","subheadSmall","ListingButton","showWarningOverride","type","bagContainer","dash","keyframes","Circle","circle","accentAction","TimedLoader","position","strokeWidth","strokeLinecap","transform","transformOrigin","r","cx","cy","bagRow","bagRowImage","grayscaleImage","assetName","collectionName","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","NoContentContainer","background","textAlign","left","top","BagRow","usdPrice","removeAsset","showRemove","grayscale","loadedImage","setImageLoaded","smallImageUrl","noImageAvailable","setNoImageAvailable","cardHovered","setCardHovered","handleMouseEnter","useCallback","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","ETHPrice","priceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","parseFloat","formatEther","handleRemoveClick","preventDefault","to","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","onLoad","onError","visibility","loadingBlock","susFlag","collectionIsVerified","emphasis","ButtonEmphasis","medium","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","gt","handleRemove","handleKeep","borderTopColor","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","borderStyle","borderWidth","borderColor","UnavailableAssetsHeaderRow","clearUnavailableAssets","didOpenUnavailableAssets","setDidOpenUnavailableAssets","useReducer","s","toggleOpen","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","slice","id","BagContent","setBagStatus","uncheckedItemsInBag","itemsInBag","setItemsInBag","removeAssetsFromBag","recalculateBagUsingPooledAssets","fetchedPriceData","useQuery","data","unchangedAssets","item","BagItemStatus","ADDED_TO_BAG","REVIEWED","priceChangedAssets","REVIEWING_PRICE_CHANGE","unavailableAssets","UNAVAILABLE","availableItems","hasAssetsInReview","hasAssets","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","IN_REVIEW","CONFIRM_REVIEW","ADDING_TO_BAG","reverse","ClearButton","ButtonText","textSecondary","IconWrapper","button","OpacityHoverState","CounterDot","accentTextLightPrimary","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","numberOfCharacters","getCircleSizing","StyledColumn","Column","EmptyState","useIsNftProfilePage","textTertiary","ProfileAssetRow","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","ProfileBagContent","DetailsPageBackground","ScrollingIndicator","show","marginX","borderBottomColor","opacity","transition","Bag","resetSellAssets","reset","shallow","useProfilePageState","setProfilePageState","profilePageState","bagIsLocked","isLocked","setLocked","setTotalEthPrice","setTotalUsdPrice","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","sendTransaction","useSendTransaction","transactionState","setTransactionState","setState","transactionStateRef","useTransactionResponse","setTransactionResponse","queryClient","useQueryClient","setModalIsOpen","userCanScroll","setUserCanScroll","scrollProgress","setScrollProgress","reduce","total","add","purchaseAssets","routingData","purchaseResponse","TxStateType","Success","Failed","handleCloseBag","manualClose","itemsToBuy","ethSellObject","buildSellObject","ethTotal","fetchQuery","fetchRoute","toSell","toBuy","senderAddress","updatedAssets","combineBuyItemsWithTxRoute","route","fetchedPriceChangedAssets","sort","sortUpdatedAssets","fetchedUnavailableAssets","isUnavailable","fetchedUnchangedAssets","hasReviewedAssets","hasUnavailableAssets","shouldReview","unavailableAsset","changedAsset","unchangedAsset","Confirming","Denied","Invalid","New","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","ProfilePageStateType","LISTING","ref","node","canScroll","scrollHeight","clientHeight","onScroll","event","scrollTop","currentTarget","containerHeight","paddingY","buttonTextMedium","commonButtonStyles","Overlay"],"mappings":"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","file":"static/js/8.2e4098ef.chunk.js","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { parseEther } from '@ethersproject/units'\r\nimport { Trans } from '@lingui/macro'\r\nimport { TraceEvent } from '@uniswap/analytics'\r\nimport { BrowserEvent, ElementName, EventName } from '@uniswap/analytics-events'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Loader from 'components/Loader'\r\nimport { SupportedChainId } from 'constants/chains'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { bodySmall } from 'nft/css/common.css'\r\nimport { useBag } from 'nft/hooks/useBag'\r\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\r\nimport { BagStatus } from 'nft/types'\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\r\nimport { PropsWithChildren, useMemo } from 'react'\r\nimport { AlertTriangle } from 'react-feather'\r\nimport { useToggleWalletModal } from 'state/application/hooks'\r\nimport styled from 'styled-components/macro'\r\nimport { ThemedText } from 'theme'\r\nimport { switchChain } from 'utils/switchChain'\r\n\r\nimport * as styles from './BagFooter.css'\r\n\r\nconst Footer = styled.div`\r\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 8px;\r\n  padding: 12px 16px;\r\n  border-bottom-left-radius: 12px;\r\n  border-bottom-right-radius: 12px;\r\n`\r\n\r\nconst WarningIcon = styled(AlertTriangle)`\r\n  width: 14px;\r\n  margin-right: 4px;\r\n  color: ${({ theme }) => theme.accentWarning};\r\n`\r\nconst WarningText = styled(ThemedText.BodyPrimary)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.accentWarning};\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 12px 0 !important;\r\n  text-align: center;\r\n`\r\n\r\ninterface ActionButtonProps {\r\n  disabled?: boolean\r\n  onClick: () => void\r\n}\r\n\r\nconst ActionButton = ({ disabled, children, onClick }: PropsWithChildren<ActionButtonProps>) => {\r\n  return (\r\n    <Row as=\"button\" color=\"explicitWhite\" className={styles.payButton} disabled={disabled} onClick={onClick}>\r\n      {children}\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst Warning = ({ children }: PropsWithChildren<unknown>) => {\r\n  if (!children) {\r\n    return null\r\n  }\r\n  return (\r\n    <WarningText fontSize=\"14px\" lineHeight=\"20px\">\r\n      <WarningIcon />\r\n      {children}\r\n    </WarningText>\r\n  )\r\n}\r\n\r\ninterface BagFooterProps {\r\n  totalEthPrice: BigNumber\r\n  totalUsdPrice: number | undefined\r\n  bagStatus: BagStatus\r\n  fetchAssets: () => void\r\n  eventProperties: Record<string, unknown>\r\n}\r\n\r\nconst PENDING_BAG_STATUSES = [\r\n  BagStatus.FETCHING_ROUTE,\r\n  BagStatus.CONFIRMING_IN_WALLET,\r\n  BagStatus.FETCHING_FINAL_ROUTE,\r\n  BagStatus.PROCESSING_TRANSACTION,\r\n]\r\n\r\nexport const BagFooter = ({\r\n  totalEthPrice,\r\n  totalUsdPrice,\r\n  bagStatus,\r\n  fetchAssets,\r\n  eventProperties,\r\n}: BagFooterProps) => {\r\n  const toggleWalletModal = useToggleWalletModal()\r\n  const { account, chainId, connector } = useWeb3React()\r\n  const connected = Boolean(account && chainId)\r\n\r\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\r\n\r\n  const { balance: balanceInEth } = useWalletBalance()\r\n  const sufficientBalance = useMemo(() => {\r\n    if (!connected || chainId !== SupportedChainId.MAINNET) {\r\n      return undefined\r\n    }\r\n    return parseEther(balanceInEth).gte(totalEthPrice)\r\n  }, [connected, chainId, balanceInEth, totalEthPrice])\r\n\r\n  const { buttonText, disabled, warningText, handleClick } = useMemo(() => {\r\n    let handleClick = fetchAssets\r\n    let buttonText = <Trans>Something went wrong</Trans>\r\n    let disabled = true\r\n    let warningText = null\r\n\r\n    if (connected && chainId !== SupportedChainId.MAINNET) {\r\n      handleClick = () => switchChain(connector, SupportedChainId.MAINNET)\r\n      buttonText = <Trans>Switch networks</Trans>\r\n      disabled = false\r\n      warningText = <Trans>Wrong network</Trans>\r\n    } else if (sufficientBalance === false) {\r\n      buttonText = <Trans>Pay</Trans>\r\n      disabled = true\r\n      warningText = <Trans>Insufficient funds</Trans>\r\n    } else if (bagStatus === BagStatus.WARNING) {\r\n      warningText = <Trans>Something went wrong. Please try again.</Trans>\r\n    } else if (!connected) {\r\n      handleClick = () => {\r\n        toggleWalletModal()\r\n        setBagExpanded({ bagExpanded: false })\r\n      }\r\n      disabled = false\r\n      buttonText = <Trans>Connect wallet</Trans>\r\n    } else if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\r\n      disabled = true\r\n      buttonText = <Trans>Proceed in wallet</Trans>\r\n    } else if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\r\n      disabled = true\r\n      buttonText = <Trans>Transaction pending</Trans>\r\n    } else if (sufficientBalance === true) {\r\n      disabled = false\r\n      buttonText = <Trans>Pay</Trans>\r\n    }\r\n\r\n    return { buttonText, disabled, warningText, handleClick }\r\n  }, [bagStatus, chainId, connected, connector, fetchAssets, setBagExpanded, sufficientBalance, toggleWalletModal])\r\n\r\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\r\n\r\n  return (\r\n    <Column className={styles.footerContainer}>\r\n      <Footer>\r\n        <Column gap=\"4\" paddingTop=\"8\" paddingBottom=\"20\">\r\n          <Row justifyContent=\"space-between\">\r\n            <Box>\r\n              <ThemedText.HeadlineSmall>Total</ThemedText.HeadlineSmall>\r\n            </Box>\r\n            <Box>\r\n              <ThemedText.HeadlineSmall>\r\n                {formatWeiToDecimal(totalEthPrice.toString())}&nbsp;ETH\r\n              </ThemedText.HeadlineSmall>\r\n            </Box>\r\n          </Row>\r\n          <Row justifyContent=\"flex-end\" color=\"textSecondary\" className={bodySmall}>\r\n            {`${ethNumberStandardFormatter(totalUsdPrice, true)}`}\r\n          </Row>\r\n        </Column>\r\n        <TraceEvent\r\n          events={[BrowserEvent.onClick]}\r\n          name={EventName.NFT_BUY_BAG_PAY}\r\n          element={ElementName.NFT_BUY_BAG_PAY_BUTTON}\r\n          properties={{ ...eventProperties }}\r\n          shouldLogImpression={connected && !disabled}\r\n        >\r\n          <Warning>{warningText}</Warning>\r\n          <ActionButton onClick={handleClick} disabled={disabled}>\r\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\r\n            {buttonText}\r\n          </ActionButton>\r\n        </TraceEvent>\r\n      </Footer>\r\n    </Column>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZCB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRkOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZiB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGY6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRnOjpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBpbnNldDogLTFweDsKICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTEuNDZkZWcsICM0NjczRkEgMCUsICM5NjQ2RkEgMTAwLjEzJSkgYm9yZGVyLWJveDsKICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50OwogIC13ZWJraXQtbWFzazogbGluZWFyLWdyYWRpZW50KCNmZmYgMCAwKSBwYWRkaW5nLWJveCwgbGluZWFyLWdyYWRpZW50KCNmZmYgMCAwKTs7CiAgLXdlYmtpdC1tYXNrLWNvbXBvc2l0ZTogeG9yOzsKICBtYXNrLWNvbXBvc2l0ZTogZXhjbHVkZTsKICBib3JkZXItc3R5bGU6IHNvbGlkOwogIGJvcmRlci13aWR0aDogMXB4OwogIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0KLl8xMjdsOGhkaDo6YmVmb3JlIHsKICBvcGFjaXR5OiAwOwogIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIC1tb3otdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIC1tcy10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlLW91dDsKfQouXzEyN2w4aGRoOmhvdmVyOjpiZWZvcmUgewogIG9wYWNpdHk6IDE7Cn0KLl8xMjdsOGhkajpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tcmd3NmV6MXcpOwp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagFooter.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagFooter.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Lm0yOWtwajQ6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuNjsKICBjdXJzb3I6IGF1dG87Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var footerContainer = 'rgw6ez2aj rgw6ez2g1';\nexport var footer = 'rgw6ez2aj rgw6ez2g1 rgw6ez2l7 rgw6ez24p rgw6ez4ld rgw6ez4av rgw6ez7cj rgw6ez7e3';\nexport var payButton = 'm29kpj4 rgw6ezcp rgw6ezb1 rgw6ez7lf rgw6ez2l7 rgw6ez24p rgw6ez4jv rgw6ez7fb rgw6ez77v rgw6ezd1 rgw6ez76b rgw6ez441 rgw6ez3q7';","import clsx from 'clsx'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { ApprovedCheckmarkIcon, ChevronUpIcon, FailedListingIcon, LoadingIcon } from 'nft/components/icons'\r\nimport { badge, bodySmall, buttonTextSmall, subhead } from 'nft/css/common.css'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\r\nimport { formatEthPrice, numberToWei } from 'nft/utils/currency'\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport * as styles from './ListingModal.css'\r\n\r\nexport const ListingSection = ({\r\n  sectionTitle,\r\n  caption = undefined,\r\n  title = undefined,\r\n  rows,\r\n  index,\r\n  openIndex,\r\n  isSuccessScreen = false,\r\n}: {\r\n  sectionTitle: string\r\n  caption?: string\r\n  title?: string\r\n  rows: AssetRow[]\r\n  index: number\r\n  openIndex: number\r\n  isSuccessScreen?: boolean\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const notAllApproved = rows.some((row: AssetRow) => row.status !== ListingStatus.APPROVED)\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\r\n\r\n  const removeRow = (row: any) => {\r\n    // collections\r\n    if (index === 1) {\r\n      for (const asset of sellAssets)\r\n        if (asset.asset_contract.address === row.collectionAddress) removeAssetMarketplace(asset, row.marketplace)\r\n    }\r\n    // listings\r\n    else removeAssetMarketplace(row.asset, row.marketplace)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsOpen(index === openIndex)\r\n  }, [index, openIndex])\r\n\r\n  function getListingRowPrice(row: AssetRow): number | undefined {\r\n    const listingRow = row as ListingRow\r\n    const newListings = listingRow.asset.newListings\r\n    return newListings?.find((listing) => listing.marketplace.name === listingRow.marketplace.name)?.price ?? 0\r\n  }\r\n\r\n  const allApproved = !notAllApproved && rows.length > 0 && !isSuccessScreen\r\n\r\n  return (\r\n    <Row\r\n      flexWrap=\"wrap\"\r\n      className={subhead}\r\n      marginTop=\"10\"\r\n      marginBottom=\"10\"\r\n      onClick={() => rows.length > 0 && setIsOpen(!isOpen)}\r\n      color={allApproved ? 'accentSuccess' : 'textPrimary'}\r\n    >\r\n      {allApproved && <ApprovedCheckmarkIcon style={{ marginRight: '8px' }} />}\r\n      {sectionTitle}\r\n      {!isSuccessScreen && <ChevronUpIcon className={clsx(`${isOpen ? '' : styles.chevronDown} ${styles.chevron}`)} />}\r\n      {(isOpen || isSuccessScreen) && (\r\n        <Column\r\n          gap=\"12\"\r\n          width=\"full\"\r\n          paddingTop={isSuccessScreen ? '28' : 'auto'}\r\n          className={clsx(!isSuccessScreen && styles.listingSectionBorder)}\r\n        >\r\n          {caption && (\r\n            <Box color=\"textPrimary\" fontWeight=\"normal\" className={caption}>\r\n              {caption}\r\n            </Box>\r\n          )}\r\n          {title && (\r\n            <Box color=\"textSecondary\" className={badge}>\r\n              {title}\r\n            </Box>\r\n          )}\r\n          <Column gap=\"8\">\r\n            {rows.map((row: AssetRow, index) => {\r\n              return (\r\n                <Column key={index} gap=\"8\">\r\n                  <Row>\r\n                    {row.images.map((image, index) => {\r\n                      return (\r\n                        <Box\r\n                          as=\"img\"\r\n                          height=\"20\"\r\n                          width=\"20\"\r\n                          borderRadius={index === 0 && (row as CollectionRow).collectionAddress ? 'round' : '4'}\r\n                          style={{ zIndex: 2 - index }}\r\n                          className={styles.listingModalIcon}\r\n                          src={image}\r\n                          alt={row.name}\r\n                          key={index}\r\n                        />\r\n                      )\r\n                    })}\r\n                    <Box\r\n                      marginLeft=\"8\"\r\n                      marginRight=\"auto\"\r\n                      fontWeight=\"normal\"\r\n                      color=\"textPrimary\"\r\n                      textOverflow=\"ellipsis\"\r\n                      overflow=\"hidden\"\r\n                      whiteSpace=\"nowrap\"\r\n                      maxWidth={{\r\n                        sm: 'max',\r\n                        md:\r\n                          row.status === ListingStatus.REJECTED || row.status === ListingStatus.FAILED ? '120' : 'full',\r\n                      }}\r\n                      className={bodySmall}\r\n                    >\r\n                      {row.name}\r\n                    </Box>\r\n                    {isSuccessScreen ? (\r\n                      getListingRowPrice(row) &&\r\n                      `${formatEthPrice(numberToWei(getListingRowPrice(row) ?? 0).toString())} ETH`\r\n                    ) : row.status === ListingStatus.APPROVED ? (\r\n                      <ApprovedCheckmarkIcon height=\"20\" width=\"20\" />\r\n                    ) : row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED ? (\r\n                      <Row gap=\"4\">\r\n                        <Box fontWeight=\"normal\" fontSize=\"14\" color=\"textSecondary\">\r\n                          {row.status}\r\n                        </Box>\r\n                        <FailedListingIcon />\r\n                      </Row>\r\n                    ) : (\r\n                      row.status === ListingStatus.SIGNING && <LoadingIcon height=\"20\" width=\"20\" stroke=\"#4673FA\" />\r\n                    )}\r\n                  </Row>\r\n                  {(row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED) && (\r\n                    <Row gap=\"8\" justifyContent=\"center\">\r\n                      <Box\r\n                        width=\"120\"\r\n                        as=\"button\"\r\n                        className={buttonTextSmall}\r\n                        borderRadius=\"12\"\r\n                        border=\"none\"\r\n                        color=\"red400\"\r\n                        height=\"32\"\r\n                        cursor=\"pointer\"\r\n                        style={{ backgroundColor: '#FA2B391A' }}\r\n                        onClick={async (e) => {\r\n                          e.stopPropagation()\r\n                          removeRow(row)\r\n                        }}\r\n                      >\r\n                        Remove\r\n                      </Box>\r\n                      <Box\r\n                        width=\"120\"\r\n                        as=\"button\"\r\n                        className={buttonTextSmall}\r\n                        borderRadius=\"12\"\r\n                        border=\"none\"\r\n                        color=\"accentAction\"\r\n                        height=\"32\"\r\n                        cursor=\"pointer\"\r\n                        style={{ backgroundColor: '#4C82FB29' }}\r\n                        onClick={async (e) => {\r\n                          e.stopPropagation()\r\n                          if (row.callback) {\r\n                            await row.callback()\r\n                          }\r\n                        }}\r\n                      >\r\n                        Try again\r\n                      </Box>\r\n                    </Row>\r\n                  )}\r\n                </Column>\r\n              )\r\n            })}\r\n          </Column>\r\n        </Column>\r\n      )}\r\n    </Row>\r\n  )\r\n}\r\n","import { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\r\nimport { sendAnalyticsEvent, Trace, useTrace } from '@uniswap/analytics'\r\nimport { EventName, ModalName } from '@uniswap/analytics-events'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { ChevronLeftIcon, XMarkIcon } from 'nft/components/icons'\r\nimport { caption, headlineSmall, subhead, subheadSmall } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport { useBag, useIsMobile, useNFTList, useSellAsset } from 'nft/hooks'\r\nimport { logListing, looksRareNonceFetcher } from 'nft/queries'\r\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\r\nimport { fetchPrice } from 'nft/utils/fetchPrice'\r\nimport { pluralize } from 'nft/utils/roundAndPluralize'\r\nimport { Dispatch, useEffect, useMemo, useRef, useState } from 'react'\r\n\r\nimport { ListingButton } from './ListingButton'\r\nimport * as styles from './ListingModal.css'\r\nimport { ListingSection } from './ListingSection'\r\nimport { approveCollectionRow, getTotalEthValue, pauseRow, resetRow, signListingRow, verifyStatus } from './utils'\r\n\r\nconst ListingModal = () => {\r\n  const { provider } = useWeb3React()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const signer = provider?.getSigner()\r\n  const listings = useNFTList((state) => state.listings)\r\n  const setListings = useNFTList((state) => state.setListings)\r\n  const collectionsRequiringApproval = useNFTList((state) => state.collectionsRequiringApproval)\r\n  const setCollectionsRequiringApproval = useNFTList((state) => state.setCollectionsRequiringApproval)\r\n  const [openIndex, setOpenIndex] = useState(0)\r\n  const listingStatus = useNFTList((state) => state.listingStatus)\r\n  const setListingStatus = useNFTList((state) => state.setListingStatus)\r\n  const [allCollectionsApproved, setAllCollectionsApproved] = useState(false)\r\n  const looksRareNonce = useNFTList((state) => state.looksRareNonce)\r\n  const setLooksRareNonce = useNFTList((state) => state.setLooksRareNonce)\r\n  const getLooksRareNonce = useNFTList((state) => state.getLooksRareNonce)\r\n  const toggleCart = useBag((state) => state.toggleBag)\r\n  const looksRareNonceRef = useRef(looksRareNonce)\r\n  const isMobile = useIsMobile()\r\n  const trace = useTrace({ modal: ModalName.NFT_LISTING })\r\n\r\n  useEffect(() => {\r\n    useNFTList.subscribe((state) => (looksRareNonceRef.current = state.looksRareNonce))\r\n  }, [])\r\n\r\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\r\n\r\n  const [ethPriceInUSD, setEthPriceInUSD] = useState(0)\r\n\r\n  useEffect(() => {\r\n    fetchPrice().then((price) => {\r\n      setEthPriceInUSD(price || 0)\r\n    })\r\n  }, [])\r\n\r\n  const startListingEventProperties = {\r\n    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\r\n    token_ids: sellAssets.map((asset) => asset.tokenId),\r\n    marketplaces: Array.from(new Set(listings.map((asset) => asset.marketplace.name))),\r\n    list_quantity: listings.length,\r\n    usd_value: ethPriceInUSD * totalEthListingValue,\r\n    ...trace,\r\n  }\r\n\r\n  const approvalEventProperties = {\r\n    list_quantity: listings.length,\r\n    usd_value: ethPriceInUSD * totalEthListingValue,\r\n    ...trace,\r\n  }\r\n\r\n  // when all collections have been approved, auto start the signing process\r\n  useEffect(() => {\r\n    collectionsRequiringApproval?.length &&\r\n      setAllCollectionsApproved(\r\n        collectionsRequiringApproval.every((collection: CollectionRow) => collection.status === ListingStatus.APPROVED)\r\n      )\r\n    if (\r\n      allCollectionsApproved &&\r\n      (listingStatus === ListingStatus.PENDING ||\r\n        listingStatus === ListingStatus.CONTINUE ||\r\n        listingStatus === ListingStatus.SIGNING)\r\n    ) {\r\n      resetAllRows()\r\n      signListings()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [collectionsRequiringApproval, allCollectionsApproved])\r\n\r\n  const allCollectionsApprovedOrPaused = useMemo(\r\n    () =>\r\n      collectionsRequiringApproval.every(\r\n        (collection: CollectionRow) =>\r\n          collection.status === ListingStatus.APPROVED || collection.status === ListingStatus.PAUSED\r\n      ),\r\n    [collectionsRequiringApproval]\r\n  )\r\n  const allListingsApprovedOrPaused = useMemo(\r\n    () =>\r\n      listings.every(\r\n        (listing: ListingRow) => listing.status === ListingStatus.APPROVED || listing.status === ListingStatus.PAUSED\r\n      ),\r\n    [listings]\r\n  )\r\n\r\n  // go back to a ready state after a successful retry\r\n  useEffect(() => {\r\n    if (listingStatus === ListingStatus.SIGNING && allCollectionsApprovedOrPaused && allListingsApprovedOrPaused) {\r\n      resetAllRows()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [allCollectionsApprovedOrPaused, allListingsApprovedOrPaused])\r\n\r\n  // handles the modal wide listing state based on conglomeration of the wallet, collection, and listing states\r\n  const startListingFlow = async () => {\r\n    if (!signer) return\r\n    sendAnalyticsEvent(EventName.NFT_SELL_START_LISTING, { ...startListingEventProperties })\r\n    setListingStatus(ListingStatus.SIGNING)\r\n    const addresses = addressesByNetwork[SupportedChainId.MAINNET]\r\n    const signerAddress = await signer.getAddress()\r\n    const nonce = await looksRareNonceFetcher(signerAddress)\r\n    setLooksRareNonce(nonce ?? 0)\r\n\r\n    if (!collectionsRequiringApproval?.some((collection) => collection.status === ListingStatus.PAUSED)) {\r\n      setListingStatus(ListingStatus.SIGNING)\r\n      setOpenIndex(1)\r\n    }\r\n    const looksRareAddress = addresses.TRANSFER_MANAGER_ERC721\r\n    // for all unique collection, marketplace combos -> approve collections\r\n    for (const collectionRow of collectionsRequiringApproval) {\r\n      verifyStatus(collectionRow.status) &&\r\n        (isMobile\r\n          ? await approveCollectionRow(\r\n              collectionRow,\r\n              collectionsRequiringApproval,\r\n              setCollectionsRequiringApproval,\r\n              signer,\r\n              looksRareAddress,\r\n              pauseAllRows\r\n            )\r\n          : approveCollectionRow(\r\n              collectionRow,\r\n              collectionsRequiringApproval,\r\n              setCollectionsRequiringApproval,\r\n              signer,\r\n              looksRareAddress,\r\n              pauseAllRows\r\n            ))\r\n    }\r\n  }\r\n\r\n  const signListings = async () => {\r\n    if (!signer || !provider) return\r\n    setListingStatus(ListingStatus.SIGNING)\r\n    setOpenIndex(2)\r\n    // sign listings\r\n    for (const listing of listings) {\r\n      verifyStatus(listing.status) &&\r\n        (await signListingRow(\r\n          listing,\r\n          listings,\r\n          setListings,\r\n          signer,\r\n          provider,\r\n          getLooksRareNonce,\r\n          setLooksRareNonce,\r\n          pauseAllRows\r\n        ))\r\n    }\r\n    const allListingsSigned = listings.every((listing: ListingRow) => listing.status === ListingStatus.APPROVED)\r\n    const paused = listings.some((listing: ListingRow) => listing.status === ListingStatus.PAUSED)\r\n    if (allListingsSigned) {\r\n      setOpenIndex(0)\r\n      setListingStatus(ListingStatus.APPROVED)\r\n    } else if (!paused) {\r\n      setListingStatus(ListingStatus.FAILED)\r\n    }\r\n    sendAnalyticsEvent(EventName.NFT_LISTING_COMPLETED, {\r\n      signatures_requested: listings.length,\r\n      signatures_approved: listings.filter((asset) => asset.status === ListingStatus.APPROVED),\r\n      ...approvalEventProperties,\r\n    })\r\n    await logListing(listings, (await signer?.getAddress()) ?? '')\r\n  }\r\n\r\n  const pauseAllRows = () => {\r\n    for (const collection of collectionsRequiringApproval) {\r\n      pauseRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\r\n    }\r\n    for (const listing of listings) {\r\n      pauseRow(listing, listings, setListings as Dispatch<AssetRow[]>)\r\n    }\r\n  }\r\n\r\n  const resetAllRows = () => {\r\n    for (const collection of collectionsRequiringApproval) {\r\n      resetRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\r\n    }\r\n    for (const listing of listings) {\r\n      resetRow(listing, listings, setListings as Dispatch<AssetRow[]>)\r\n    }\r\n  }\r\n\r\n  const clickStopListing = () => {\r\n    pauseAllRows()\r\n  }\r\n\r\n  const clickStartListingFlow = () => {\r\n    resetAllRows()\r\n    allCollectionsApproved ? signListings() : startListingFlow()\r\n  }\r\n\r\n  const showSuccessScreen = useMemo(() => listingStatus === ListingStatus.APPROVED, [listingStatus])\r\n\r\n  return (\r\n    <Trace modal={ModalName.NFT_LISTING}>\r\n      <Column paddingTop=\"20\" paddingBottom=\"20\" paddingLeft=\"12\" paddingRight=\"12\">\r\n        <Row className={headlineSmall} marginBottom=\"10\">\r\n          {isMobile && !showSuccessScreen && (\r\n            <Box paddingTop=\"4\" marginRight=\"4\" onClick={toggleCart}>\r\n              <ChevronLeftIcon height={28} width={28} />\r\n            </Box>\r\n          )}\r\n          {showSuccessScreen ? 'Success!' : `Listing ${sellAssets.length} NFTs`}\r\n          <Box\r\n            as=\"button\"\r\n            border=\"none\"\r\n            color=\"textSecondary\"\r\n            backgroundColor=\"backgroundSurface\"\r\n            marginLeft=\"auto\"\r\n            marginRight=\"0\"\r\n            paddingRight=\"0\"\r\n            display={{ sm: 'flex', md: 'none' }}\r\n            cursor=\"pointer\"\r\n            onClick={toggleCart}\r\n          >\r\n            <XMarkIcon height={28} width={28} fill={themeVars.colors.textPrimary} />\r\n          </Box>\r\n        </Row>\r\n        <Column overflowX=\"hidden\" overflowY=\"auto\" style={{ maxHeight: '60vh' }}>\r\n          {showSuccessScreen ? (\r\n            <Trace\r\n              name={EventName.NFT_LISTING_COMPLETED}\r\n              properties={{ list_quantity: listings.length, usd_value: ethPriceInUSD * totalEthListingValue, ...trace }}\r\n            >\r\n              <ListingSection\r\n                sectionTitle={`Listed ${listings.length} item${pluralize(listings.length)} for sale`}\r\n                rows={listings}\r\n                index={0}\r\n                openIndex={openIndex}\r\n                isSuccessScreen={true}\r\n              />\r\n            </Trace>\r\n          ) : (\r\n            <>\r\n              <ListingSection\r\n                sectionTitle={`Approve ${collectionsRequiringApproval.length} collection${pluralize(\r\n                  collectionsRequiringApproval.length\r\n                )}`}\r\n                title=\"COLLECTIONS\"\r\n                rows={collectionsRequiringApproval}\r\n                index={1}\r\n                openIndex={openIndex}\r\n              />\r\n              <ListingSection\r\n                sectionTitle={`Confirm ${listings.length} listing${pluralize(listings.length)}`}\r\n                caption=\"Now you can sign to list each item\"\r\n                title=\"NFTS\"\r\n                rows={listings}\r\n                index={2}\r\n                openIndex={openIndex}\r\n              />\r\n            </>\r\n          )}\r\n        </Column>\r\n        <hr className={styles.sectionDivider} />\r\n        <Row className={subhead} marginTop=\"12\" marginBottom={showSuccessScreen ? '8' : '20'}>\r\n          Return if sold\r\n          <Row className={subheadSmall} marginLeft=\"auto\" marginRight=\"0\">\r\n            {totalEthListingValue}\r\n            &nbsp;ETH\r\n          </Row>\r\n        </Row>\r\n        {showSuccessScreen ? (\r\n          <Box as=\"span\" className={caption} color=\"textSecondary\">\r\n            Status:{' '}\r\n            <Box as=\"span\" color=\"accentSuccess\">\r\n              Confirmed\r\n            </Box>\r\n          </Box>\r\n        ) : (\r\n          <ListingButton onClick={clickStartListingFlow} buttonText=\"Start listing\" showWarningOverride={isMobile} />\r\n        )}\r\n        {(listingStatus === ListingStatus.PENDING || listingStatus === ListingStatus.SIGNING) && (\r\n          <Box\r\n            as=\"button\"\r\n            border=\"none\"\r\n            backgroundColor=\"backgroundSurface\"\r\n            cursor=\"pointer\"\r\n            color=\"orange\"\r\n            className={styles.button}\r\n            onClick={clickStopListing}\r\n            type=\"button\"\r\n          >\r\n            Stop listing\r\n          </Box>\r\n        )}\r\n      </Column>\r\n    </Trace>\r\n  )\r\n}\r\n\r\nexport default ListingModal\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2aj rgw6ez2g1 rgw6ez1vp rgw6ez7jr';\nexport var bagContainer = '_1jcz50r3 rgw6ez457 rgw6ez3bj rgw6ez3fe rgw6ez151 rgw6ez1bp rgw6ez361 rgw6ez4lp rgw6ez76v rgw6ez4xd rgw6ez7g3 rgw6ez4av';","import { Box } from 'nft/components/Box'\r\nimport styled, { keyframes } from 'styled-components/macro'\r\n\r\nconst dash = keyframes`\r\n  0% {\r\n    stroke-dashoffset: 1000;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n`\r\nconst Circle = styled.circle`\r\n  stroke-dasharray: 1000;\r\n  stroke-dashoffset: 0;\r\n  -webkit-animation: ${dash} linear;\r\n  animation: ${dash} linear;\r\n  animation-duration: 160s;\r\n  stroke: ${({ theme }) => theme.accentAction};\r\n`\r\nexport const TimedLoader = () => {\r\n  const stroke = 1.5\r\n\r\n  return (\r\n    <Box display=\"flex\" position=\"absolute\">\r\n      <svg height=\"18px\" width=\"18px\">\r\n        <Circle\r\n          strokeWidth={`${stroke}`}\r\n          strokeLinecap=\"round\"\r\n          style={{\r\n            transform: 'rotate(90deg)',\r\n            transformOrigin: '50% 50%',\r\n          }}\r\n          fill=\"transparent\"\r\n          r=\"8px\"\r\n          cx=\"9px\"\r\n          cy=\"9px\"\r\n        />\r\n      </svg>\r\n    </Box>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZCB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRkOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZiB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGY6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRnOjpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBpbnNldDogLTFweDsKICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTEuNDZkZWcsICM0NjczRkEgMCUsICM5NjQ2RkEgMTAwLjEzJSkgYm9yZGVyLWJveDsKICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50OwogIC13ZWJraXQtbWFzazogbGluZWFyLWdyYWRpZW50KCNmZmYgMCAwKSBwYWRkaW5nLWJveCwgbGluZWFyLWdyYWRpZW50KCNmZmYgMCAwKTs7CiAgLXdlYmtpdC1tYXNrLWNvbXBvc2l0ZTogeG9yOzsKICBtYXNrLWNvbXBvc2l0ZTogZXhjbHVkZTsKICBib3JkZXItc3R5bGU6IHNvbGlkOwogIGJvcmRlci13aWR0aDogMXB4OwogIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0KLl8xMjdsOGhkaDo6YmVmb3JlIHsKICBvcGFjaXR5OiAwOwogIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIC1tb3otdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIC1tcy10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlLW91dDsKfQouXzEyN2w4aGRoOmhvdmVyOjpiZWZvcmUgewogIG9wYWNpdHk6IDE7Cn0KLl8xMjdsOGhkajpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tcmd3NmV6MXcpOwp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var bagRow = '_1kuawc1 rgw6ez2a7 rgw6ez2fp rgw6ez2kv rgw6ez24d rgw6ez4av rgw6ez3pv rgw6ez76b rgw6ez1bp rgw6ez77v';\nexport var unavailableAssetsContainer = 'rgw6ez2lj rgw6ez251 rgw6ezjv rgw6ezpd rgw6ez4ov rgw6ez3pv rgw6ez4av rgw6ez76n rgw6ez7g3 rgw6ez50j rgw6ez5wv rgw6ez5l1 rgw6ez1bp';\nexport var priceChangeColumn = 'rgw6ez2lj rgw6ez251 rgw6ezjv rgw6ezpd rgw6ez4ov rgw6ez3pj rgw6ez4av rgw6ez76n rgw6ez7g3 rgw6ez50j rgw6ez5l1 rgw6ez1bp rgw6ez76b';\nexport var priceChangeRow = 'rgw6ezcp rgw6ezav rgw6ez7lb rgw6ez48p rgw6ez3p7';\nexport var bagRowImage = 'rgw6ez12p rgw6ez19d rgw6ez461 rgw6ez77n';\nexport var grayscaleImage = '_1kuawc7';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3p7 rgw6ezb1 rgw6ezd1 rgw6ez3u7';\nexport var assetName = '_1kuawcb rgw6ezb1 rgw6ezcv rgw6ez7if rgw6ez427 rgw6ez421';\nexport var collectionName = 'rgw6ezcp rgw6ezav rgw6ez7lb rgw6ez7if rgw6ez421 rgw6ez427 rgw6ez4b1';\nexport var icon = 'rgw6ez3u7';","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nimport clsx from 'clsx'\r\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\r\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Suspicious } from 'nft/components/collection/Card'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport {\r\n  ChevronDownBagIcon,\r\n  ChevronUpBagIcon,\r\n  CircularCloseIcon,\r\n  CloseTimerIcon,\r\n  SquareArrowDownIcon,\r\n  SquareArrowUpIcon,\r\n  VerifiedIcon,\r\n} from 'nft/components/icons'\r\nimport { bodySmall } from 'nft/css/common.css'\r\nimport { loadingBlock } from 'nft/css/loading.css'\r\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\r\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\r\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components/macro'\r\n\r\nimport * as styles from './BagRow.css'\r\n\r\nexport const RemoveButton = styled(ThemeButton)`\r\n  border-radius: 12px;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  margin-left: 16px;\r\n  padding: 12px 14px;\r\n`\r\nconst ReviewButton = styled(ThemeButton)`\r\n  border-radius: 12px;\r\n  flex: 1 1 auto;\r\n  font-size: 14px;\r\n  padding: 8px;\r\n  width: 50%;\r\n`\r\nconst RemoveAssetOverlay = styled.div`\r\n  position: absolute;\r\n  display: block;\r\n  right: -11px;\r\n  top: -11px;\r\n  z-index: 1;\r\n  transition: 250ms;\r\n  width: 45px;\r\n  height: 45px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\r\n  <RemoveAssetOverlay onClick={onClick}>\r\n    <CircularCloseIcon />\r\n  </RemoveAssetOverlay>\r\n)\r\n\r\nconst NoContentContainer = () => (\r\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\r\n    <Box\r\n      position=\"absolute\"\r\n      textAlign=\"center\"\r\n      left=\"1/2\"\r\n      top=\"1/2\"\r\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\r\n      color=\"gray500\"\r\n      fontSize=\"12\"\r\n      fontWeight=\"normal\"\r\n    >\r\n      Image\r\n      <br />\r\n      not\r\n      <br />\r\n      available\r\n    </Box>\r\n  </Box>\r\n)\r\n\r\ninterface BagRowProps {\r\n  asset: UpdatedGenieAsset\r\n  usdPrice: number | undefined\r\n  removeAsset: (assets: GenieAsset[]) => void\r\n  showRemove?: boolean\r\n  grayscale?: boolean\r\n  isMobile: boolean\r\n}\r\n\r\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\r\n  const [loadedImage, setImageLoaded] = useState(false)\r\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\r\n\r\n  const [cardHovered, setCardHovered] = useState(false)\r\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\r\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\r\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\r\n\r\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\r\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\r\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\r\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\r\n    true\r\n  )\r\n\r\n  const handleRemoveClick = useCallback(\r\n    (e: MouseEvent<HTMLElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      removeAsset([asset])\r\n    },\r\n    [asset, removeAsset]\r\n  )\r\n\r\n  return (\r\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\r\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n        <Box position=\"relative\" display=\"flex\">\r\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\r\n          {!noImageAvailable && (\r\n            <Box\r\n              as=\"img\"\r\n              src={asset.smallImageUrl}\r\n              alt={asset.name}\r\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\r\n              onLoad={() => {\r\n                setImageLoaded(true)\r\n              }}\r\n              onError={() => {\r\n                setNoImageAvailable(true)\r\n              }}\r\n              visibility={loadedImage ? 'visible' : 'hidden'}\r\n            />\r\n          )}\r\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\r\n          {noImageAvailable && <NoContentContainer />}\r\n        </Box>\r\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\r\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\r\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\r\n            {asset.susFlag && <Suspicious />}\r\n          </Row>\r\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\r\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\r\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\r\n          </Row>\r\n        </Column>\r\n        {showRemoveButton && (\r\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\r\n            Remove\r\n          </RemoveButton>\r\n        )}\r\n        {(!showRemoveButton || isMobile) && (\r\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\r\n            <Box className={styles.bagRowPrice}>\r\n              {assetEthPriceFormatted}\r\n              &nbsp;ETH\r\n            </Box>\r\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\r\n          </Column>\r\n        )}\r\n      </Row>\r\n    </Link>\r\n  )\r\n}\r\n\r\ninterface PriceChangeBagRowProps {\r\n  asset: UpdatedGenieAsset\r\n  usdPrice: number | undefined\r\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\r\n  top?: boolean\r\n  isMobile: boolean\r\n}\r\n\r\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\r\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\r\n  const handleRemove = useCallback(\r\n    (e: MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      const toKeep = false\r\n      markAssetAsReviewed(asset, toKeep)\r\n    },\r\n    [asset, markAssetAsReviewed]\r\n  )\r\n  const handleKeep = useCallback(\r\n    (e: MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      const toKeep = true\r\n      markAssetAsReviewed(asset, toKeep)\r\n    },\r\n    [asset, markAssetAsReviewed]\r\n  )\r\n  return (\r\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\r\n      <Row className={styles.priceChangeRow}>\r\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\r\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\r\n          asset.priceInfo.ETHPrice\r\n        )} ETH`}</Box>\r\n      </Row>\r\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\r\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\r\n      </Box>\r\n      <Row gap=\"8\" justifyContent=\"space-between\">\r\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\r\n          Remove\r\n        </ReviewButton>\r\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\r\n          Keep\r\n        </ReviewButton>\r\n      </Row>\r\n    </Column>\r\n  )\r\n}\r\n\r\ninterface UnavailableAssetsHeaderRowProps {\r\n  assets?: UpdatedGenieAsset[]\r\n  usdPrice: number | undefined\r\n  clearUnavailableAssets: () => void\r\n  didOpenUnavailableAssets: boolean\r\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\r\n  isMobile: boolean\r\n}\r\n\r\ninterface UnavailableAssetsPreviewProps {\r\n  assets: UpdatedGenieAsset[]\r\n}\r\n\r\nconst ASSET_PREVIEW_WIDTH = 32\r\nconst ASSET_PREVIEW_OFFSET = 20\r\n\r\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\r\n  <Column\r\n    display=\"grid\"\r\n    style={{\r\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\r\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\r\n    }}\r\n  >\r\n    {assets.map((asset, index) => (\r\n      <Box\r\n        key={`${asset.address}-${asset.tokenId}`}\r\n        as=\"img\"\r\n        src={asset.smallImageUrl}\r\n        width=\"32\"\r\n        height=\"32\"\r\n        borderStyle=\"solid\"\r\n        borderWidth=\"1px\"\r\n        borderColor=\"backgroundSurface\"\r\n        borderRadius=\"4\"\r\n        style={{ zIndex: index }}\r\n        className={styles.grayscaleImage}\r\n      />\r\n    ))}\r\n  </Column>\r\n)\r\n\r\nexport const UnavailableAssetsHeaderRow = ({\r\n  assets,\r\n  usdPrice,\r\n  clearUnavailableAssets,\r\n  didOpenUnavailableAssets,\r\n  setDidOpenUnavailableAssets,\r\n  isMobile,\r\n}: UnavailableAssetsHeaderRowProps) => {\r\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\r\n  const timerLimit = 8\r\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\r\n\r\n  useEffect(() => {\r\n    if (!timeLeft) {\r\n      if (!didOpenUnavailableAssets) {\r\n        clearUnavailableAssets()\r\n        setDidOpenUnavailableAssets(false)\r\n      }\r\n      return\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      setTimeLeft(timeLeft - 1)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(intervalId)\r\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\r\n\r\n  if (!assets || assets.length === 0) return null\r\n\r\n  const moreThanOneUnavailable = assets.length > 1\r\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\r\n\r\n  return (\r\n    <Column className={styles.unavailableAssetsContainer}>\r\n      <Column>\r\n        <Row\r\n          justifyContent=\"space-between\"\r\n          marginBottom={isShowingAssets ? '12' : '0'}\r\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\r\n          onClick={() => {\r\n            if (moreThanOneUnavailable) {\r\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\r\n              toggleOpen()\r\n            }\r\n          }}\r\n        >\r\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\r\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\r\n            No longer available\r\n          </Row>\r\n          {moreThanOneUnavailable && (\r\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\r\n          )}\r\n          {!didOpenUnavailableAssets && (\r\n            <Row\r\n              position=\"relative\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n              color=\"textPrimary\"\r\n              justifyContent=\"center\"\r\n              cursor=\"pointer\"\r\n              onClick={clearUnavailableAssets}\r\n            >\r\n              <TimedLoader />\r\n              <CloseTimerIcon />\r\n            </Row>\r\n          )}\r\n        </Row>\r\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\r\n          {isShowingAssets &&\r\n            assets.map((asset) => (\r\n              <BagRow\r\n                key={asset.id}\r\n                asset={asset}\r\n                usdPrice={usdPrice}\r\n                removeAsset={() => undefined}\r\n                grayscale\r\n                isMobile={isMobile}\r\n              />\r\n            ))}\r\n        </Column>\r\n      </Column>\r\n    </Column>\r\n  )\r\n}\r\n","import { sendAnalyticsEvent, Trace } from '@uniswap/analytics'\r\nimport { EventName } from '@uniswap/analytics-events'\r\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\r\nimport { Column } from 'nft/components/Flex'\r\nimport { useBag, useIsMobile } from 'nft/hooks'\r\nimport { BagItemStatus, BagStatus } from 'nft/types'\r\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useQuery } from 'react-query'\r\n\r\nexport const BagContent = () => {\r\n  const bagStatus = useBag((s) => s.bagStatus)\r\n  const setBagStatus = useBag((s) => s.setBagStatus)\r\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\r\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\r\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\r\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\r\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\r\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\r\n\r\n  const isMobile = useIsMobile()\r\n\r\n  const itemsInBag = useMemo(() => {\r\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\r\n  }, [uncheckedItemsInBag])\r\n\r\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\r\n\r\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\r\n    const unchangedAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\r\n      .map((item) => item.asset)\r\n    const priceChangedAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\r\n      .map((item) => item.asset)\r\n    const unavailableAssets = itemsInBag\r\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\r\n      .map((item) => item.asset)\r\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\r\n\r\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\r\n  }, [itemsInBag])\r\n\r\n  useEffect(() => {\r\n    const hasAssetsInReview = priceChangedAssets.length > 0\r\n    const hasAssets = itemsInBag.length > 0\r\n\r\n    if (hasAssetsInReview)\r\n      sendAnalyticsEvent(EventName.NFT_BUY_BAG_CHANGED, {\r\n        usd_value: fetchedPriceData,\r\n        bag_quantity: itemsInBag,\r\n        ...formatAssetEventProperties(priceChangedAssets),\r\n      })\r\n\r\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\r\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\r\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\r\n    }\r\n\r\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\r\n      setBagStatus(BagStatus.ADDING_TO_BAG)\r\n    }\r\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\r\n\r\n  return (\r\n    <>\r\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\r\n        {unavailableAssets.length > 0 && (\r\n          <Trace\r\n            name={EventName.NFT_BUY_BAG_CHANGED}\r\n            properties={{\r\n              usd_value: fetchedPriceData,\r\n              bag_quantity: itemsInBag.length,\r\n              ...formatAssetEventProperties(unavailableAssets),\r\n            }}\r\n            shouldLogImpression\r\n          >\r\n            <UnavailableAssetsHeaderRow\r\n              assets={unavailableAssets}\r\n              usdPrice={fetchedPriceData}\r\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\r\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\r\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\r\n              isMobile={isMobile}\r\n            />\r\n          </Trace>\r\n        )}\r\n        {priceChangedAssets.map((asset, index) => (\r\n          <PriceChangeBagRow\r\n            key={asset.id}\r\n            asset={asset}\r\n            usdPrice={fetchedPriceData}\r\n            markAssetAsReviewed={markAssetAsReviewed}\r\n            top={index === 0 && unavailableAssets.length === 0}\r\n            isMobile={isMobile}\r\n          />\r\n        ))}\r\n      </Column>\r\n      <Column gap=\"8\">\r\n        {unchangedAssets\r\n          .slice(0)\r\n          .reverse()\r\n          .map((asset) => (\r\n            <BagRow\r\n              key={asset.id}\r\n              asset={asset}\r\n              usdPrice={fetchedPriceData}\r\n              removeAsset={removeAssetsFromBag}\r\n              showRemove={true}\r\n              isMobile={isMobile}\r\n            />\r\n          ))}\r\n      </Column>\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { OpacityHoverState } from 'components/Common'\r\nimport { BagCloseIcon } from 'nft/components/icons'\r\nimport { useMemo } from 'react'\r\nimport styled from 'styled-components/macro'\r\nimport { ButtonText, ThemedText } from 'theme'\r\n\r\nconst ClearButton = styled(ButtonText)`\r\n  color: ${({ theme }) => theme.textSecondary};\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nconst IconWrapper = styled.button`\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border-radius: 8px;\r\n  border: none;\r\n  color: ${({ theme }) => theme.textPrimary};\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  margin-left: auto;\r\n  padding: 2px;\r\n  opacity: 1;\r\n\r\n  ${OpacityHoverState}\r\n`\r\nconst CounterDot = styled.div<{ sizing: string }>`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.accentAction};\r\n  border-radius: 100px;\r\n  font-weight: bold;\r\n  color: ${({ theme }) => theme.accentTextLightPrimary};\r\n  display: flex;\r\n  font-size: 10px;\r\n  justify-content: center;\r\n  min-width: ${({ sizing }) => sizing};\r\n  min-height: ${({ sizing }) => sizing};\r\n  padding: 4px 6px;\r\n`\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 8px;\r\n  justify-content: flex-start;\r\n  margin: 16px 20px;\r\n  text-align: center;\r\n`\r\ninterface BagHeaderProps {\r\n  numberOfAssets: number\r\n  closeBag: () => void\r\n  resetFlow: () => void\r\n  isProfilePage: boolean\r\n}\r\n\r\nconst BASE_SIZING = 14\r\nconst INCREMENTAL_SIZING = 6\r\n\r\nconst getCircleSizing = (numberOfAssets: number): string => {\r\n  const numberOfCharacters = numberOfAssets.toString().length\r\n\r\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\r\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\r\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\r\n}\r\n\r\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\r\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\r\n      {numberOfAssets > 0 && (\r\n        <>\r\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\r\n          <ClearButton onClick={resetFlow}>Clear all</ClearButton>\r\n        </>\r\n      )}\r\n      <IconWrapper onClick={closeBag}>\r\n        <BagCloseIcon />\r\n      </IconWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\r\nimport { Center, Column } from 'nft/components/Flex'\r\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\r\nimport { subhead } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport styled from 'styled-components/macro'\r\n\r\nconst StyledColumn = styled(Column)`\r\n  gap: 12px;\r\n  margin-top: 68px;\r\n`\r\n\r\nconst EmptyState = () => {\r\n  const isProfilePage = useIsNftProfilePage()\r\n\r\n  return (\r\n    <StyledColumn>\r\n      <Center>\r\n        {isProfilePage ? (\r\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\r\n        ) : (\r\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\r\n        )}\r\n      </Center>\r\n      {isProfilePage ? (\r\n        <Center className={subhead}>No NFTs selected</Center>\r\n      ) : (\r\n        <Column gap=\"16\">\r\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\r\n            Your bag is empty\r\n          </Center>\r\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\r\n            Selected NFTs will appear here\r\n          </Center>\r\n        </Column>\r\n      )}\r\n    </StyledColumn>\r\n  )\r\n}\r\n\r\nexport default EmptyState\r\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\r\nimport { WalletAsset } from 'nft/types'\r\nimport { useState } from 'react'\r\n\r\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\r\nimport * as styles from '../BagRow.css'\r\n\r\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\r\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const isMobile = useIsMobile()\r\n  const [hovered, setHovered] = useState(false)\r\n  const handleHover = () => setHovered(!hovered)\r\n\r\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    removeAsset(asset)\r\n  }\r\n\r\n  return (\r\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\r\n      <Box position=\"relative\" display=\"flex\">\r\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\r\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\r\n      </Box>\r\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\r\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\r\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\r\n        </Row>\r\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\r\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\r\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\r\n        </Row>\r\n      </Column>\r\n      {hovered && !isMobile && (\r\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\r\n          Remove\r\n        </RemoveButton>\r\n      )}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfileAssetRow\r\n","import { Column } from 'nft/components/Flex'\r\nimport { useSellAsset } from 'nft/hooks'\r\n\r\nimport ProfileAssetRow from './ProfileAssetRow'\r\n\r\nexport const ProfileBagContent = () => {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  return (\r\n    <Column>\r\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\r\n    </Column>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\r\nimport { BagFooter } from 'nft/components/bag/BagFooter'\r\nimport ListingModal from 'nft/components/bag/profile/ListingModal'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Portal } from 'nft/components/common/Portal'\r\nimport { Column } from 'nft/components/Flex'\r\nimport { Overlay } from 'nft/components/modals/Overlay'\r\nimport { buttonTextMedium, commonButtonStyles } from 'nft/css/common.css'\r\nimport {\r\n  useBag,\r\n  useIsMobile,\r\n  useProfilePageState,\r\n  useSellAsset,\r\n  useSendTransaction,\r\n  useTransactionResponse,\r\n} from 'nft/hooks'\r\nimport { fetchRoute } from 'nft/queries'\r\nimport { BagItemStatus, BagStatus, ProfilePageStateType, RouteResponse, TxStateType } from 'nft/types'\r\nimport {\r\n  buildSellObject,\r\n  fetchPrice,\r\n  formatAssetEventProperties,\r\n  recalculateBagUsingPooledAssets,\r\n  sortUpdatedAssets,\r\n} from 'nft/utils'\r\nimport { combineBuyItemsWithTxRoute } from 'nft/utils/txRoute/combineItemsWithTxRoute'\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useQuery, useQueryClient } from 'react-query'\r\nimport styled from 'styled-components/macro'\r\nimport shallow from 'zustand/shallow'\r\n\r\nimport * as styles from './Bag.css'\r\nimport { BagContent } from './BagContent'\r\nimport { BagHeader } from './BagHeader'\r\nimport EmptyState from './EmptyContent'\r\nimport { ProfileBagContent } from './profile/ProfileBagContent'\r\n\r\ninterface SeparatorProps {\r\n  top?: boolean\r\n  show?: boolean\r\n}\r\n\r\nconst DetailsPageBackground = styled.div`\r\n  position: fixed;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  top: 72px;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\r\n  <Box\r\n    marginX=\"16\"\r\n    borderWidth=\"1px\"\r\n    borderStyle=\"solid\"\r\n    borderColor=\"transparent\"\r\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\r\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\r\n    opacity={show ? '1' : '0'}\r\n    transition=\"250\"\r\n  />\r\n)\r\n\r\nconst Bag = () => {\r\n  const { account, provider } = useWeb3React()\r\n\r\n  const { resetSellAssets, sellAssets } = useSellAsset(\r\n    ({ reset, sellAssets }) => ({\r\n      resetSellAssets: reset,\r\n      sellAssets,\r\n    }),\r\n    shallow\r\n  )\r\n\r\n  const { profilePageState, setProfilePageState } = useProfilePageState(\r\n    ({ setProfilePageState, state }) => ({ profilePageState: state, setProfilePageState }),\r\n    shallow\r\n  )\r\n\r\n  const {\r\n    bagStatus,\r\n    setBagStatus,\r\n    didOpenUnavailableAssets,\r\n    setDidOpenUnavailableAssets,\r\n    bagIsLocked,\r\n    setLocked,\r\n    reset,\r\n    setItemsInBag,\r\n    bagExpanded,\r\n    toggleBag,\r\n    setTotalEthPrice,\r\n    setTotalUsdPrice,\r\n    setBagExpanded,\r\n  } = useBag((state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }), shallow)\r\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\r\n\r\n  const isProfilePage = useIsNftProfilePage()\r\n  const isDetailsPage = useIsNftDetailsPage()\r\n  const isNFTPage = useIsNftPage()\r\n  const isMobile = useIsMobile()\r\n\r\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\r\n  const transactionState = useSendTransaction((state) => state.state)\r\n  const setTransactionState = useSendTransaction((state) => state.setState)\r\n  const transactionStateRef = useRef(transactionState)\r\n  const [setTransactionResponse] = useTransactionResponse((state) => [state.setTransactionResponse])\r\n\r\n  const queryClient = useQueryClient()\r\n\r\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\r\n\r\n  const [isOpen, setModalIsOpen] = useState(false)\r\n  const [userCanScroll, setUserCanScroll] = useState(false)\r\n  const [scrollProgress, setScrollProgress] = useState(0)\r\n  const scrollRef = (node: HTMLDivElement) => {\r\n    if (node !== null) {\r\n      const canScroll = node.scrollHeight > node.clientHeight\r\n      canScroll !== userCanScroll && setUserCanScroll(canScroll)\r\n    }\r\n  }\r\n\r\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\r\n\r\n  const { totalEthPrice, totalUsdPrice } = useMemo(() => {\r\n    const totalEthPrice = itemsInBag.reduce(\r\n      (total, item) =>\r\n        item.status !== BagItemStatus.UNAVAILABLE\r\n          ? total.add(\r\n            BigNumber.from(\r\n              item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\r\n            )\r\n          )\r\n          : total,\r\n      BigNumber.from(0)\r\n    )\r\n    const totalUsdPrice = fetchedPriceData ? parseFloat(formatEther(totalEthPrice)) * fetchedPriceData : undefined\r\n\r\n    return { totalEthPrice, totalUsdPrice }\r\n  }, [itemsInBag, fetchedPriceData])\r\n\r\n  const purchaseAssets = async (routingData: RouteResponse) => {\r\n    if (!provider || !routingData) return\r\n    const purchaseResponse = await sendTransaction(\r\n      provider?.getSigner(),\r\n      itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset),\r\n      routingData\r\n    )\r\n    if (\r\n      purchaseResponse &&\r\n      (transactionStateRef.current === TxStateType.Success || transactionStateRef.current === TxStateType.Failed)\r\n    ) {\r\n      setLocked(false)\r\n      setModalIsOpen(false)\r\n      setTransactionResponse(purchaseResponse)\r\n      setBagExpanded({ bagExpanded: false })\r\n      reset()\r\n    }\r\n  }\r\n\r\n  const handleCloseBag = useCallback(() => {\r\n    setBagExpanded({ bagExpanded: false, manualClose: true })\r\n  }, [setBagExpanded])\r\n\r\n  const fetchAssets = async () => {\r\n    const itemsToBuy = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\r\n    const ethSellObject = buildSellObject(\r\n      itemsToBuy\r\n        .reduce((ethTotal, asset) => ethTotal.add(BigNumber.from(asset.priceInfo.ETHPrice)), BigNumber.from(0))\r\n        .toString()\r\n    )\r\n\r\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\r\n    !bagIsLocked && setLocked(true)\r\n    setBagStatus(BagStatus.FETCHING_ROUTE)\r\n    try {\r\n      const data = await queryClient.fetchQuery(['assetsRoute', ethSellObject, itemsToBuy, account], () =>\r\n        fetchRoute({\r\n          toSell: [ethSellObject],\r\n          toBuy: itemsToBuy,\r\n          senderAddress: account ?? '',\r\n        })\r\n      )\r\n\r\n      const updatedAssets = combineBuyItemsWithTxRoute(itemsToBuy, data.route)\r\n\r\n      const fetchedPriceChangedAssets = updatedAssets.filter((asset) => asset.updatedPriceInfo).sort(sortUpdatedAssets)\r\n      const fetchedUnavailableAssets = updatedAssets.filter((asset) => asset.isUnavailable)\r\n      const fetchedUnchangedAssets = updatedAssets.filter((asset) => !asset.updatedPriceInfo && !asset.isUnavailable)\r\n      const hasReviewedAssets = fetchedUnchangedAssets.length > 0\r\n      const hasAssetsInReview = fetchedPriceChangedAssets.length > 0\r\n      const hasUnavailableAssets = fetchedUnavailableAssets.length > 0\r\n      const hasAssets = hasReviewedAssets || hasAssetsInReview || hasUnavailableAssets\r\n      const shouldReview = hasAssetsInReview || hasUnavailableAssets\r\n\r\n      setItemsInBag([\r\n        ...fetchedUnavailableAssets.map((unavailableAsset) => ({\r\n          asset: unavailableAsset,\r\n          status: BagItemStatus.UNAVAILABLE,\r\n        })),\r\n        ...fetchedPriceChangedAssets.map((changedAsset) => ({\r\n          asset: changedAsset,\r\n          status: BagItemStatus.REVIEWING_PRICE_CHANGE,\r\n        })),\r\n        ...fetchedUnchangedAssets.map((unchangedAsset) => ({ asset: unchangedAsset, status: BagItemStatus.REVIEWED })),\r\n      ])\r\n      setLocked(false)\r\n\r\n      if (hasAssets) {\r\n        if (!shouldReview) {\r\n          purchaseAssets(data)\r\n          setBagStatus(BagStatus.CONFIRMING_IN_WALLET)\r\n        } else if (!hasAssetsInReview) setBagStatus(BagStatus.CONFIRM_REVIEW)\r\n        else {\r\n          setBagStatus(BagStatus.IN_REVIEW)\r\n        }\r\n      } else {\r\n        setBagStatus(BagStatus.ADDING_TO_BAG)\r\n      }\r\n    } catch (error) {\r\n      setBagStatus(BagStatus.ADDING_TO_BAG)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (bagIsLocked && !isOpen) setModalIsOpen(true)\r\n  }, [bagIsLocked, isOpen])\r\n\r\n  useEffect(() => {\r\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\r\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\r\n      if (transactionStateRef.current === TxStateType.Invalid) setBagStatus(BagStatus.WARNING)\r\n      else setBagStatus(BagStatus.CONFIRM_REVIEW)\r\n      setTransactionState(TxStateType.New)\r\n\r\n      setLocked(false)\r\n      setModalIsOpen(false)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [transactionStateRef.current])\r\n\r\n  useEffect(() => {\r\n    setTotalEthPrice(totalEthPrice)\r\n    setTotalUsdPrice(totalUsdPrice)\r\n  }, [totalEthPrice, totalUsdPrice, setTotalEthPrice, setTotalUsdPrice])\r\n\r\n  const hasAssetsToShow = itemsInBag.length > 0\r\n\r\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement>) => {\r\n    const scrollTop = event.currentTarget.scrollTop\r\n    const containerHeight = event.currentTarget.clientHeight\r\n    const scrollHeight = event.currentTarget.scrollHeight\r\n\r\n    setScrollProgress(scrollTop ? ((scrollTop + containerHeight) / scrollHeight) * 100 : 0)\r\n  }\r\n\r\n  const isBuyingAssets = itemsInBag.length > 0\r\n  const isSellingAssets = sellAssets.length > 0\r\n\r\n  const shouldRenderEmptyState = Boolean(\r\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\r\n  )\r\n\r\n  const eventProperties = useMemo(\r\n    () => ({\r\n      usd_value: totalUsdPrice,\r\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\r\n    }),\r\n    [itemsInBag, totalUsdPrice]\r\n  )\r\n\r\n  if (!bagExpanded || !isNFTPage) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Portal>\r\n      {!(isProfilePage && profilePageState === ProfilePageStateType.LISTING) ? (\r\n        <Column zIndex={isMobile || isOpen ? 'modalOverTooltip' : '3'} className={styles.bagContainer}>\r\n          <BagHeader\r\n            numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\r\n            closeBag={handleCloseBag}\r\n            resetFlow={isProfilePage ? resetSellAssets : reset}\r\n            isProfilePage={isProfilePage}\r\n          />\r\n          {shouldRenderEmptyState && <EmptyState />}\r\n          <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\r\n          <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\r\n            {isProfilePage ? <ProfileBagContent /> : <BagContent />}\r\n          </Column>\r\n          {hasAssetsToShow && !isProfilePage && (\r\n            <BagFooter\r\n              totalEthPrice={totalEthPrice}\r\n              totalUsdPrice={totalUsdPrice}\r\n              bagStatus={bagStatus}\r\n              fetchAssets={fetchAssets}\r\n              eventProperties={eventProperties}\r\n            />\r\n          )}\r\n          {isSellingAssets && isProfilePage && (\r\n            <Box\r\n              marginTop=\"32\"\r\n              marginX=\"28\"\r\n              paddingY=\"10\"\r\n              className={`${buttonTextMedium} ${commonButtonStyles}`}\r\n              backgroundColor=\"accentAction\"\r\n              color=\"white\"\r\n              textAlign=\"center\"\r\n              onClick={() => {\r\n                isMobile && toggleBag()\r\n                setProfilePageState(ProfilePageStateType.LISTING)\r\n              }}\r\n            >\r\n              Continue\r\n            </Box>\r\n          )}\r\n        </Column>\r\n      ) : (\r\n        <Column zIndex={isMobile || isOpen ? 'modalOverTooltip' : '3'} className={styles.bagContainer}>\r\n          <ListingModal />\r\n        </Column>\r\n      )}\r\n\r\n      {isDetailsPage ? (\r\n        <DetailsPageBackground onClick={toggleBag} />\r\n      ) : (\r\n        isOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\r\n      )}\r\n    </Portal>\r\n  )\r\n}\r\n\r\nexport default Bag\r\n"],"sourceRoot":""}